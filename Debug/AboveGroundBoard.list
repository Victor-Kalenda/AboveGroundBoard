
AboveGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000383c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  080038fc  080038fc  000048fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b84  08003b84  00005084  2**0
                  CONTENTS
  4 .ARM          00000000  08003b84  08003b84  00005084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b84  08003b84  00005084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b84  08003b84  00004b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b88  08003b88  00004b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08003b8c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000084  08003c10  00005084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08003c10  00005340  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aab4  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b65  00000000  00000000  0000fb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  000116c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000658  00000000  00000000  00011f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014058  00000000  00000000  00012558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abb0  00000000  00000000  000265b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d30e  00000000  00000000  00031160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae46e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c74  00000000  00000000  000ae4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000b0128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038e4 	.word	0x080038e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	080038e4 	.word	0x080038e4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fcb8 	bl	8000d6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f847 	bl	8000490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f8d9 	bl	80005b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000406:	f000 f887 	bl	8000518 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  if(modbus_set_rx(255) != HAL_OK)
 800040a:	20ff      	movs	r0, #255	@ 0xff
 800040c:	f000 fb32 	bl	8000a74 <modbus_set_rx>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d001      	beq.n	8000418 <main+0x24>
   {
 	  Error_Handler();
 8000414:	f000 f90a 	bl	800062c <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if(modbus_rx())
 8000418:	f000 fb18 	bl	8000a4c <modbus_rx>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d0fb      	beq.n	8000418 <main+0x24>
	{
		int8_t status = 0;
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
		if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 8000426:	2000      	movs	r0, #0
 8000428:	f000 f914 	bl	8000654 <get_rx_buffer>
 800042c:	0003      	movs	r3, r0
 800042e:	001a      	movs	r2, r3
 8000430:	4b16      	ldr	r3, [pc, #88]	@ (800048c <main+0x98>)
 8000432:	881b      	ldrh	r3, [r3, #0]
 8000434:	429a      	cmp	r2, r3
 8000436:	d11b      	bne.n	8000470 <main+0x7c>
		{
			switch(get_rx_buffer(1))
 8000438:	2001      	movs	r0, #1
 800043a:	f000 f90b 	bl	8000654 <get_rx_buffer>
 800043e:	0003      	movs	r3, r0
 8000440:	2b03      	cmp	r3, #3
 8000442:	d002      	beq.n	800044a <main+0x56>
 8000444:	2b10      	cmp	r3, #16
 8000446:	d006      	beq.n	8000456 <main+0x62>
 8000448:	e00b      	b.n	8000462 <main+0x6e>
			{
				case 0x03:
				{
					// Return holding registers
					status = return_holding_registers();
 800044a:	1dfc      	adds	r4, r7, #7
 800044c:	f000 f918 	bl	8000680 <return_holding_registers>
 8000450:	0003      	movs	r3, r0
 8000452:	7023      	strb	r3, [r4, #0]
					break;
 8000454:	e005      	b.n	8000462 <main+0x6e>
				}
				case 0x10:
				{
					// Write holding registers
					status = edit_multiple_registers();
 8000456:	1dfc      	adds	r4, r7, #7
 8000458:	f000 f9a2 	bl	80007a0 <edit_multiple_registers>
 800045c:	0003      	movs	r3, r0
 800045e:	7023      	strb	r3, [r4, #0]
					break;
 8000460:	46c0      	nop			@ (mov r8, r8)
				}
			}
			if(status != 0)
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	b25b      	sxtb	r3, r3
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <main+0x7c>
			{
				// log error in a queue
				Error_Handler();
 800046c:	f000 f8de 	bl	800062c <Error_Handler>
			}
		}
		status = modbus_set_rx(255); // may be able to set size to 12
 8000470:	1dfc      	adds	r4, r7, #7
 8000472:	20ff      	movs	r0, #255	@ 0xff
 8000474:	f000 fafe 	bl	8000a74 <modbus_set_rx>
 8000478:	0003      	movs	r3, r0
 800047a:	7023      	strb	r3, [r4, #0]
		if(status != 0)
 800047c:	1dfb      	adds	r3, r7, #7
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b25b      	sxtb	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d0c8      	beq.n	8000418 <main+0x24>
		{
			// log error in a queue
			Error_Handler();
 8000486:	f000 f8d1 	bl	800062c <Error_Handler>
	if(modbus_rx())
 800048a:	e7c5      	b.n	8000418 <main+0x24>
 800048c:	20000000 	.word	0x20000000

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b590      	push	{r4, r7, lr}
 8000492:	b08f      	sub	sp, #60	@ 0x3c
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	2418      	movs	r4, #24
 8000498:	193b      	adds	r3, r7, r4
 800049a:	0018      	movs	r0, r3
 800049c:	2320      	movs	r3, #32
 800049e:	001a      	movs	r2, r3
 80004a0:	2100      	movs	r1, #0
 80004a2:	f003 f9f3 	bl	800388c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	0018      	movs	r0, r3
 80004aa:	2314      	movs	r3, #20
 80004ac:	001a      	movs	r2, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	f003 f9ec 	bl	800388c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2202      	movs	r2, #2
 80004b8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	2280      	movs	r2, #128	@ 0x80
 80004be:	0052      	lsls	r2, r2, #1
 80004c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	2280      	movs	r2, #128	@ 0x80
 80004c6:	0152      	lsls	r2, r2, #5
 80004c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2240      	movs	r2, #64	@ 0x40
 80004ce:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 feee 	bl	80012b4 <HAL_RCC_OscConfig>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004dc:	f000 f8a6 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2207      	movs	r2, #7
 80004e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2200      	movs	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	2100      	movs	r1, #0
 8000502:	0018      	movs	r0, r3
 8000504:	f001 f8fc 	bl	8001700 <HAL_RCC_ClockConfig>
 8000508:	1e03      	subs	r3, r0, #0
 800050a:	d001      	beq.n	8000510 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800050c:	f000 f88e 	bl	800062c <Error_Handler>
  }
}
 8000510:	46c0      	nop			@ (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	b00f      	add	sp, #60	@ 0x3c
 8000516:	bd90      	pop	{r4, r7, pc}

08000518 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800051c:	4b24      	ldr	r3, [pc, #144]	@ (80005b0 <MX_USART1_UART_Init+0x98>)
 800051e:	4a25      	ldr	r2, [pc, #148]	@ (80005b4 <MX_USART1_UART_Init+0x9c>)
 8000520:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000522:	4b23      	ldr	r3, [pc, #140]	@ (80005b0 <MX_USART1_UART_Init+0x98>)
 8000524:	22e1      	movs	r2, #225	@ 0xe1
 8000526:	0252      	lsls	r2, r2, #9
 8000528:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800052a:	4b21      	ldr	r3, [pc, #132]	@ (80005b0 <MX_USART1_UART_Init+0x98>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000530:	4b1f      	ldr	r3, [pc, #124]	@ (80005b0 <MX_USART1_UART_Init+0x98>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000536:	4b1e      	ldr	r3, [pc, #120]	@ (80005b0 <MX_USART1_UART_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800053c:	4b1c      	ldr	r3, [pc, #112]	@ (80005b0 <MX_USART1_UART_Init+0x98>)
 800053e:	220c      	movs	r2, #12
 8000540:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000542:	4b1b      	ldr	r3, [pc, #108]	@ (80005b0 <MX_USART1_UART_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000548:	4b19      	ldr	r3, [pc, #100]	@ (80005b0 <MX_USART1_UART_Init+0x98>)
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800054e:	4b18      	ldr	r3, [pc, #96]	@ (80005b0 <MX_USART1_UART_Init+0x98>)
 8000550:	2200      	movs	r2, #0
 8000552:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000554:	4b16      	ldr	r3, [pc, #88]	@ (80005b0 <MX_USART1_UART_Init+0x98>)
 8000556:	2200      	movs	r2, #0
 8000558:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800055a:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <MX_USART1_UART_Init+0x98>)
 800055c:	2200      	movs	r2, #0
 800055e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000560:	4813      	ldr	r0, [pc, #76]	@ (80005b0 <MX_USART1_UART_Init+0x98>)
 8000562:	2300      	movs	r3, #0
 8000564:	2200      	movs	r2, #0
 8000566:	2100      	movs	r1, #0
 8000568:	f002 ffa0 	bl	80034ac <HAL_RS485Ex_Init>
 800056c:	1e03      	subs	r3, r0, #0
 800056e:	d001      	beq.n	8000574 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000570:	f000 f85c 	bl	800062c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000574:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <MX_USART1_UART_Init+0x98>)
 8000576:	2100      	movs	r1, #0
 8000578:	0018      	movs	r0, r3
 800057a:	f003 f843 	bl	8003604 <HAL_UARTEx_SetTxFifoThreshold>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000582:	f000 f853 	bl	800062c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <MX_USART1_UART_Init+0x98>)
 8000588:	2100      	movs	r1, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f003 f87a 	bl	8003684 <HAL_UARTEx_SetRxFifoThreshold>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000594:	f000 f84a 	bl	800062c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000598:	4b05      	ldr	r3, [pc, #20]	@ (80005b0 <MX_USART1_UART_Init+0x98>)
 800059a:	0018      	movs	r0, r3
 800059c:	f002 fff8 	bl	8003590 <HAL_UARTEx_DisableFifoMode>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 80005a4:	f000 f842 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005a8:	46c0      	nop			@ (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	200000a0 	.word	0x200000a0
 80005b4:	40013800 	.word	0x40013800

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	4b1a      	ldr	r3, [pc, #104]	@ (8000628 <MX_GPIO_Init+0x70>)
 80005c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005c2:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <MX_GPIO_Init+0x70>)
 80005c4:	2104      	movs	r1, #4
 80005c6:	430a      	orrs	r2, r1
 80005c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ca:	4b17      	ldr	r3, [pc, #92]	@ (8000628 <MX_GPIO_Init+0x70>)
 80005cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ce:	2204      	movs	r2, #4
 80005d0:	4013      	ands	r3, r2
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d6:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <MX_GPIO_Init+0x70>)
 80005d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005da:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <MX_GPIO_Init+0x70>)
 80005dc:	2120      	movs	r1, #32
 80005de:	430a      	orrs	r2, r1
 80005e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80005e2:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <MX_GPIO_Init+0x70>)
 80005e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005e6:	2220      	movs	r2, #32
 80005e8:	4013      	ands	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <MX_GPIO_Init+0x70>)
 80005f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <MX_GPIO_Init+0x70>)
 80005f4:	2102      	movs	r1, #2
 80005f6:	430a      	orrs	r2, r1
 80005f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80005fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <MX_GPIO_Init+0x70>)
 80005fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005fe:	2202      	movs	r2, #2
 8000600:	4013      	ands	r3, r2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <MX_GPIO_Init+0x70>)
 8000608:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800060a:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <MX_GPIO_Init+0x70>)
 800060c:	2101      	movs	r1, #1
 800060e:	430a      	orrs	r2, r1
 8000610:	635a      	str	r2, [r3, #52]	@ 0x34
 8000612:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <MX_GPIO_Init+0x70>)
 8000614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000616:	2201      	movs	r2, #1
 8000618:	4013      	ands	r3, r2
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b004      	add	sp, #16
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	40021000 	.word	0x40021000

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	e7fd      	b.n	8000634 <Error_Handler+0x8>

08000638 <HAL_UART_RxCpltCallback>:
};


// Recieve Interrupt Handler
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	rx_int = 1;
 8000640:	4b03      	ldr	r3, [pc, #12]	@ (8000650 <HAL_UART_RxCpltCallback+0x18>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b002      	add	sp, #8
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	20000338 	.word	0x20000338

08000654 <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	0002      	movs	r2, r0
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bff      	cmp	r3, #255	@ 0xff
 8000666:	d004      	beq.n	8000672 <get_rx_buffer+0x1e>
	{
		return modbus_rx_buffer[index];
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a03      	ldr	r2, [pc, #12]	@ (800067c <get_rx_buffer+0x28>)
 800066e:	5cd3      	ldrb	r3, [r2, r3]
 8000670:	e000      	b.n	8000674 <get_rx_buffer+0x20>
	}
	return 0xFF;
 8000672:	23ff      	movs	r3, #255	@ 0xff
}
 8000674:	0018      	movs	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	b002      	add	sp, #8
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000134 	.word	0x20000134

08000680 <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (modbus_rx_buffer[2] << 8) | modbus_rx_buffer[3];
 8000686:	4b43      	ldr	r3, [pc, #268]	@ (8000794 <return_holding_registers+0x114>)
 8000688:	789b      	ldrb	r3, [r3, #2]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	4b41      	ldr	r3, [pc, #260]	@ (8000794 <return_holding_registers+0x114>)
 8000690:	78db      	ldrb	r3, [r3, #3]
 8000692:	b21b      	sxth	r3, r3
 8000694:	4313      	orrs	r3, r2
 8000696:	b21a      	sxth	r2, r3
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5];
 800069c:	4b3d      	ldr	r3, [pc, #244]	@ (8000794 <return_holding_registers+0x114>)
 800069e:	791b      	ldrb	r3, [r3, #4]
 80006a0:	021b      	lsls	r3, r3, #8
 80006a2:	b21a      	sxth	r2, r3
 80006a4:	4b3b      	ldr	r3, [pc, #236]	@ (8000794 <return_holding_registers+0x114>)
 80006a6:	795b      	ldrb	r3, [r3, #5]
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b21a      	sxth	r2, r3
 80006ae:	1cbb      	adds	r3, r7, #2
 80006b0:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 80006b2:	1cbb      	adds	r3, r7, #2
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	2b7d      	cmp	r3, #125	@ 0x7d
 80006b8:	d803      	bhi.n	80006c2 <return_holding_registers+0x42>
 80006ba:	1cbb      	adds	r3, r7, #2
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d104      	bne.n	80006cc <return_holding_registers+0x4c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 80006c2:	2006      	movs	r0, #6
 80006c4:	f000 f934 	bl	8000930 <modbus_exception>
 80006c8:	0003      	movs	r3, r0
 80006ca:	e05f      	b.n	800078c <return_holding_registers+0x10c>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 80006cc:	1cba      	adds	r2, r7, #2
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	8812      	ldrh	r2, [r2, #0]
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	18d3      	adds	r3, r2, r3
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	003b      	movs	r3, r7
 80006da:	3a01      	subs	r2, #1
 80006dc:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 80006de:	003b      	movs	r3, r7
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	2b3b      	cmp	r3, #59	@ 0x3b
 80006e4:	d904      	bls.n	80006f0 <return_holding_registers+0x70>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 80006e6:	2005      	movs	r0, #5
 80006e8:	f000 f922 	bl	8000930 <modbus_exception>
 80006ec:	0003      	movs	r3, r0
 80006ee:	e04d      	b.n	800078c <return_holding_registers+0x10c>
	}

	// Return register values

	modbus_tx_buffer[0] = modbus_rx_buffer[0]; // Append Slave id
 80006f0:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <return_holding_registers+0x114>)
 80006f2:	781a      	ldrb	r2, [r3, #0]
 80006f4:	4b28      	ldr	r3, [pc, #160]	@ (8000798 <return_holding_registers+0x118>)
 80006f6:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1]; // Append Function Code
 80006f8:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <return_holding_registers+0x114>)
 80006fa:	785a      	ldrb	r2, [r3, #1]
 80006fc:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <return_holding_registers+0x118>)
 80006fe:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8000700:	1cbb      	adds	r3, r7, #2
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	18db      	adds	r3, r3, r3
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b23      	ldr	r3, [pc, #140]	@ (8000798 <return_holding_registers+0x118>)
 800070c:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	2203      	movs	r2, #3
 8000712:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8000714:	1dbb      	adds	r3, r7, #6
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	e028      	b.n	800076e <return_holding_registers+0xee>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	881a      	ldrh	r2, [r3, #0]
 8000720:	1dbb      	adds	r3, r7, #6
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	18d2      	adds	r2, r2, r3
 8000726:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <return_holding_registers+0x11c>)
 8000728:	0052      	lsls	r2, r2, #1
 800072a:	5ad3      	ldrh	r3, [r2, r3]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	b299      	uxth	r1, r3
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	1dfa      	adds	r2, r7, #7
 8000736:	1c58      	adds	r0, r3, #1
 8000738:	7010      	strb	r0, [r2, #0]
 800073a:	001a      	movs	r2, r3
 800073c:	b2c9      	uxtb	r1, r1
 800073e:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <return_holding_registers+0x118>)
 8000740:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	881a      	ldrh	r2, [r3, #0]
 8000746:	1dbb      	adds	r3, r7, #6
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	18d2      	adds	r2, r2, r3
 800074c:	4b13      	ldr	r3, [pc, #76]	@ (800079c <return_holding_registers+0x11c>)
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	5ad1      	ldrh	r1, [r2, r3]
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	1dfa      	adds	r2, r7, #7
 8000758:	1c58      	adds	r0, r3, #1
 800075a:	7010      	strb	r0, [r2, #0]
 800075c:	001a      	movs	r2, r3
 800075e:	b2c9      	uxtb	r1, r1
 8000760:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <return_holding_registers+0x118>)
 8000762:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8000764:	1dbb      	adds	r3, r7, #6
 8000766:	781a      	ldrb	r2, [r3, #0]
 8000768:	1dbb      	adds	r3, r7, #6
 800076a:	3201      	adds	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	1dbb      	adds	r3, r7, #6
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b29b      	uxth	r3, r3
 8000774:	1cba      	adds	r2, r7, #2
 8000776:	8812      	ldrh	r2, [r2, #0]
 8000778:	429a      	cmp	r2, r3
 800077a:	d8cf      	bhi.n	800071c <return_holding_registers+0x9c>
	}

	return modbus_send(modbus_tx_buffer, index);
 800077c:	1dfb      	adds	r3, r7, #7
 800077e:	781a      	ldrb	r2, [r3, #0]
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <return_holding_registers+0x118>)
 8000782:	0011      	movs	r1, r2
 8000784:	0018      	movs	r0, r3
 8000786:	f000 f8f9 	bl	800097c <modbus_send>
 800078a:	0003      	movs	r3, r0
}
 800078c:	0018      	movs	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	b002      	add	sp, #8
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000134 	.word	0x20000134
 8000798:	20000234 	.word	0x20000234
 800079c:	20000000 	.word	0x20000000

080007a0 <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (modbus_rx_buffer[2] << 8) | modbus_rx_buffer[3];
 80007a6:	4b5f      	ldr	r3, [pc, #380]	@ (8000924 <edit_multiple_registers+0x184>)
 80007a8:	789b      	ldrb	r3, [r3, #2]
 80007aa:	021b      	lsls	r3, r3, #8
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	4b5d      	ldr	r3, [pc, #372]	@ (8000924 <edit_multiple_registers+0x184>)
 80007b0:	78db      	ldrb	r3, [r3, #3]
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5];
 80007bc:	4b59      	ldr	r3, [pc, #356]	@ (8000924 <edit_multiple_registers+0x184>)
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	021b      	lsls	r3, r3, #8
 80007c2:	b21a      	sxth	r2, r3
 80007c4:	4b57      	ldr	r3, [pc, #348]	@ (8000924 <edit_multiple_registers+0x184>)
 80007c6:	795b      	ldrb	r3, [r3, #5]
 80007c8:	b21b      	sxth	r3, r3
 80007ca:	4313      	orrs	r3, r2
 80007cc:	b21a      	sxth	r2, r3
 80007ce:	1cbb      	adds	r3, r7, #2
 80007d0:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 80007d2:	1cbb      	adds	r3, r7, #2
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	2b7d      	cmp	r3, #125	@ 0x7d
 80007d8:	d803      	bhi.n	80007e2 <edit_multiple_registers+0x42>
 80007da:	1cbb      	adds	r3, r7, #2
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d104      	bne.n	80007ec <edit_multiple_registers+0x4c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 80007e2:	2006      	movs	r0, #6
 80007e4:	f000 f8a4 	bl	8000930 <modbus_exception>
 80007e8:	0003      	movs	r3, r0
 80007ea:	e096      	b.n	800091a <edit_multiple_registers+0x17a>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 80007ec:	1cba      	adds	r2, r7, #2
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	8812      	ldrh	r2, [r2, #0]
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	003b      	movs	r3, r7
 80007fa:	3a01      	subs	r2, #1
 80007fc:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 80007fe:	003b      	movs	r3, r7
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	2b3b      	cmp	r3, #59	@ 0x3b
 8000804:	d904      	bls.n	8000810 <edit_multiple_registers+0x70>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000806:	2005      	movs	r0, #5
 8000808:	f000 f892 	bl	8000930 <modbus_exception>
 800080c:	0003      	movs	r3, r0
 800080e:	e084      	b.n	800091a <edit_multiple_registers+0x17a>
	}

	if((last_register_address <= 10 && last_register_address >= 2) 		||
 8000810:	003b      	movs	r3, r7
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	2b0a      	cmp	r3, #10
 8000816:	d803      	bhi.n	8000820 <edit_multiple_registers+0x80>
 8000818:	003b      	movs	r3, r7
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d80f      	bhi.n	8000840 <edit_multiple_registers+0xa0>
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	2b0a      	cmp	r3, #10
 8000826:	d803      	bhi.n	8000830 <edit_multiple_registers+0x90>
		(first_register_address <= 10 && first_register_address >= 2) 	||
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d807      	bhi.n	8000840 <edit_multiple_registers+0xa0>
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d808      	bhi.n	800084a <edit_multiple_registers+0xaa>
		(first_register_address < 2 && last_register_address > 10))
 8000838:	003b      	movs	r3, r7
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	2b0a      	cmp	r3, #10
 800083e:	d904      	bls.n	800084a <edit_multiple_registers+0xaa>
	{
		// Ensure that ADC values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8000840:	2004      	movs	r0, #4
 8000842:	f000 f875 	bl	8000930 <modbus_exception>
 8000846:	0003      	movs	r3, r0
 8000848:	e067      	b.n	800091a <edit_multiple_registers+0x17a>
	}


	// Edit holding registers
	modbus_tx_buffer[0] = modbus_rx_buffer[0]; // Append Slave id
 800084a:	4b36      	ldr	r3, [pc, #216]	@ (8000924 <edit_multiple_registers+0x184>)
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	4b36      	ldr	r3, [pc, #216]	@ (8000928 <edit_multiple_registers+0x188>)
 8000850:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1]; // Append Function Code
 8000852:	4b34      	ldr	r3, [pc, #208]	@ (8000924 <edit_multiple_registers+0x184>)
 8000854:	785a      	ldrb	r2, [r3, #1]
 8000856:	4b34      	ldr	r3, [pc, #208]	@ (8000928 <edit_multiple_registers+0x188>)
 8000858:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 800085a:	1cbb      	adds	r3, r7, #2
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	18db      	adds	r3, r3, r3
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b30      	ldr	r3, [pc, #192]	@ (8000928 <edit_multiple_registers+0x188>)
 8000866:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	2203      	movs	r2, #3
 800086c:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 800086e:	1dbb      	adds	r3, r7, #6
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
 8000874:	e042      	b.n	80008fc <edit_multiple_registers+0x15c>
	{
		holding_register_database[first_register_address + i] = (modbus_rx_buffer[2 * i + 6] << 8) | modbus_rx_buffer[2 * i + 7];
 8000876:	1dbb      	adds	r3, r7, #6
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	3303      	adds	r3, #3
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	4a29      	ldr	r2, [pc, #164]	@ (8000924 <edit_multiple_registers+0x184>)
 8000880:	5cd3      	ldrb	r3, [r2, r3]
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	b21a      	sxth	r2, r3
 8000886:	1dbb      	adds	r3, r7, #6
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	3307      	adds	r3, #7
 800088e:	4925      	ldr	r1, [pc, #148]	@ (8000924 <edit_multiple_registers+0x184>)
 8000890:	5ccb      	ldrb	r3, [r1, r3]
 8000892:	b21b      	sxth	r3, r3
 8000894:	4313      	orrs	r3, r2
 8000896:	b219      	sxth	r1, r3
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	881a      	ldrh	r2, [r3, #0]
 800089c:	1dbb      	adds	r3, r7, #6
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	18d2      	adds	r2, r2, r3
 80008a2:	b289      	uxth	r1, r1
 80008a4:	4b21      	ldr	r3, [pc, #132]	@ (800092c <edit_multiple_registers+0x18c>)
 80008a6:	0052      	lsls	r2, r2, #1
 80008a8:	52d1      	strh	r1, [r2, r3]
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	881a      	ldrh	r2, [r3, #0]
 80008ae:	1dbb      	adds	r3, r7, #6
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	18d2      	adds	r2, r2, r3
 80008b4:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <edit_multiple_registers+0x18c>)
 80008b6:	0052      	lsls	r2, r2, #1
 80008b8:	5ad3      	ldrh	r3, [r2, r3]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b299      	uxth	r1, r3
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	1dfa      	adds	r2, r7, #7
 80008c4:	1c58      	adds	r0, r3, #1
 80008c6:	7010      	strb	r0, [r2, #0]
 80008c8:	001a      	movs	r2, r3
 80008ca:	b2c9      	uxtb	r1, r1
 80008cc:	4b16      	ldr	r3, [pc, #88]	@ (8000928 <edit_multiple_registers+0x188>)
 80008ce:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	881a      	ldrh	r2, [r3, #0]
 80008d4:	1dbb      	adds	r3, r7, #6
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	18d2      	adds	r2, r2, r3
 80008da:	4b14      	ldr	r3, [pc, #80]	@ (800092c <edit_multiple_registers+0x18c>)
 80008dc:	0052      	lsls	r2, r2, #1
 80008de:	5ad1      	ldrh	r1, [r2, r3]
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	1dfa      	adds	r2, r7, #7
 80008e6:	1c58      	adds	r0, r3, #1
 80008e8:	7010      	strb	r0, [r2, #0]
 80008ea:	001a      	movs	r2, r3
 80008ec:	b2c9      	uxtb	r1, r1
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <edit_multiple_registers+0x188>)
 80008f0:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 80008f2:	1dbb      	adds	r3, r7, #6
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	1dbb      	adds	r3, r7, #6
 80008f8:	3201      	adds	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	1dbb      	adds	r3, r7, #6
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b29b      	uxth	r3, r3
 8000902:	1cba      	adds	r2, r7, #2
 8000904:	8812      	ldrh	r2, [r2, #0]
 8000906:	429a      	cmp	r2, r3
 8000908:	d8b5      	bhi.n	8000876 <edit_multiple_registers+0xd6>
	}

	return modbus_send(modbus_tx_buffer, index);
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <edit_multiple_registers+0x188>)
 8000910:	0011      	movs	r1, r2
 8000912:	0018      	movs	r0, r3
 8000914:	f000 f832 	bl	800097c <modbus_send>
 8000918:	0003      	movs	r3, r0
}
 800091a:	0018      	movs	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	b002      	add	sp, #8
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	20000134 	.word	0x20000134
 8000928:	20000234 	.word	0x20000234
 800092c:	20000000 	.word	0x20000000

08000930 <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	0002      	movs	r2, r0
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = modbus_rx_buffer[0];
 800093c:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <modbus_exception+0x44>)
 800093e:	781a      	ldrb	r2, [r3, #0]
 8000940:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <modbus_exception+0x48>)
 8000942:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1] | 0x80;
 8000944:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <modbus_exception+0x44>)
 8000946:	785b      	ldrb	r3, [r3, #1]
 8000948:	2280      	movs	r2, #128	@ 0x80
 800094a:	4252      	negs	r2, r2
 800094c:	4313      	orrs	r3, r2
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <modbus_exception+0x48>)
 8000952:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	3b03      	subs	r3, #3
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <modbus_exception+0x48>)
 800095e:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <modbus_exception+0x48>)
 8000962:	2103      	movs	r1, #3
 8000964:	0018      	movs	r0, r3
 8000966:	f000 f809 	bl	800097c <modbus_send>
 800096a:	0003      	movs	r3, r0
}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b002      	add	sp, #8
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000134 	.word	0x20000134
 8000978:	20000234 	.word	0x20000234

0800097c <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	000a      	movs	r2, r1
 8000986:	1cfb      	adds	r3, r7, #3
 8000988:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(data, size);
 800098a:	250e      	movs	r5, #14
 800098c:	197c      	adds	r4, r7, r5
 800098e:	1cfb      	adds	r3, r7, #3
 8000990:	781a      	ldrb	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f000 f884 	bl	8000aa4 <crc_16>
 800099c:	0003      	movs	r3, r0
 800099e:	8023      	strh	r3, [r4, #0]
	data[size] = low_byte(crc);
 80009a0:	1cfb      	adds	r3, r7, #3
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	18d3      	adds	r3, r2, r3
 80009a8:	197a      	adds	r2, r7, r5
 80009aa:	8812      	ldrh	r2, [r2, #0]
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	701a      	strb	r2, [r3, #0]
	data[size + 1] = high_byte(crc);
 80009b0:	197b      	adds	r3, r7, r5
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	b299      	uxth	r1, r3
 80009b8:	1cfb      	adds	r3, r7, #3
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	18d3      	adds	r3, r2, r3
 80009c2:	b2ca      	uxtb	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]

	int8_t status = HAL_OK;
 80009c6:	240d      	movs	r4, #13
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Transmit_IT(&huart1, data, size + 2);
 80009ce:	1cfb      	adds	r3, r7, #3
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	3302      	adds	r3, #2
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <modbus_send+0xc4>)
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 f931 	bl	8001c44 <HAL_UART_Transmit_IT>
 80009e2:	0003      	movs	r3, r0
 80009e4:	001a      	movs	r2, r3
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d003      	beq.n	80009fc <modbus_send+0x80>
	{
		return status;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	e01d      	b.n	8000a38 <modbus_send+0xbc>
	}
	time = HAL_GetTick();
 80009fc:	f000 fa2a 	bl	8000e54 <HAL_GetTick>
 8000a00:	0002      	movs	r2, r0
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <modbus_send+0xc8>)
 8000a04:	601a      	str	r2, [r3, #0]
	while(!tx_int && ((HAL_GetTick()) - time < 100));
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <modbus_send+0xcc>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d107      	bne.n	8000a22 <modbus_send+0xa6>
 8000a12:	f000 fa1f 	bl	8000e54 <HAL_GetTick>
 8000a16:	0002      	movs	r2, r0
 8000a18:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <modbus_send+0xc8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	2b63      	cmp	r3, #99	@ 0x63
 8000a20:	d9f2      	bls.n	8000a08 <modbus_send+0x8c>
	if(tx_int)
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <modbus_send+0xcc>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d004      	beq.n	8000a36 <modbus_send+0xba>
	{
		tx_int = 0;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <modbus_send+0xcc>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <modbus_send+0xbc>
	}
	else
	{
		return HAL_TIMEOUT;
 8000a36:	2303      	movs	r3, #3
	}
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b004      	add	sp, #16
 8000a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a40:	200000a0 	.word	0x200000a0
 8000a44:	20000334 	.word	0x20000334
 8000a48:	20000339 	.word	0x20000339

08000a4c <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	if(rx_int)
 8000a50:	4b07      	ldr	r3, [pc, #28]	@ (8000a70 <modbus_rx+0x24>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d004      	beq.n	8000a64 <modbus_rx+0x18>
	{
		rx_int = 0;
 8000a5a:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <modbus_rx+0x24>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
		return 1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e002      	b.n	8000a6a <modbus_rx+0x1e>
	}
	return rx_int;
 8000a64:	4b02      	ldr	r3, [pc, #8]	@ (8000a70 <modbus_rx+0x24>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2db      	uxtb	r3, r3
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000338 	.word	0x20000338

08000a74 <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx(uint8_t size)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	0002      	movs	r2, r0
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	701a      	strb	r2, [r3, #0]
	return HAL_UARTEx_ReceiveToIdle_IT(&huart1, modbus_rx_buffer, size);
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	4905      	ldr	r1, [pc, #20]	@ (8000a9c <modbus_set_rx+0x28>)
 8000a88:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <modbus_set_rx+0x2c>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f002 fe3c 	bl	8003708 <HAL_UARTEx_ReceiveToIdle_IT>
 8000a90:	0003      	movs	r3, r0
 8000a92:	b25b      	sxtb	r3, r3
	//return HAL_UART_Receive_IT(&huart1, modbus_rx_buffer, size);
}
 8000a94:	0018      	movs	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b002      	add	sp, #8
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000134 	.word	0x20000134
 8000aa0:	200000a0 	.word	0x200000a0

08000aa4 <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	000a      	movs	r2, r1
 8000aae:	1cfb      	adds	r3, r7, #3
 8000ab0:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8000ab2:	230f      	movs	r3, #15
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	22ff      	movs	r2, #255	@ 0xff
 8000ab8:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8000aba:	230e      	movs	r3, #14
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	22ff      	movs	r2, #255	@ 0xff
 8000ac0:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8000ac2:	e019      	b.n	8000af8 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	200e      	movs	r0, #14
 8000ace:	183b      	adds	r3, r7, r0
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4053      	eors	r3, r2
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8000ad8:	4a13      	ldr	r2, [pc, #76]	@ (8000b28 <crc_16+0x84>)
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	18d3      	adds	r3, r2, r3
 8000ade:	7819      	ldrb	r1, [r3, #0]
 8000ae0:	183b      	adds	r3, r7, r0
 8000ae2:	200f      	movs	r0, #15
 8000ae4:	183a      	adds	r2, r7, r0
 8000ae6:	7812      	ldrb	r2, [r2, #0]
 8000ae8:	404a      	eors	r2, r1
 8000aea:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8000aec:	183b      	adds	r3, r7, r0
 8000aee:	490f      	ldr	r1, [pc, #60]	@ (8000b2c <crc_16+0x88>)
 8000af0:	68ba      	ldr	r2, [r7, #8]
 8000af2:	188a      	adds	r2, r1, r2
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	701a      	strb	r2, [r3, #0]
	while (size--)
 8000af8:	1cfb      	adds	r3, r7, #3
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	1cfa      	adds	r2, r7, #3
 8000afe:	1e59      	subs	r1, r3, #1
 8000b00:	7011      	strb	r1, [r2, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d1de      	bne.n	8000ac4 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8000b06:	230f      	movs	r3, #15
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	021b      	lsls	r3, r3, #8
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	230e      	movs	r3, #14
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	b29b      	uxth	r3, r3
}
 8000b1e:	0018      	movs	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b004      	add	sp, #16
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	080038fc 	.word	0x080038fc
 8000b2c:	080039fc 	.word	0x080039fc

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b42:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b52:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b54:	2180      	movs	r1, #128	@ 0x80
 8000b56:	0549      	lsls	r1, r1, #21
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <HAL_MspInit+0x44>)
 8000b5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b60:	2380      	movs	r3, #128	@ 0x80
 8000b62:	055b      	lsls	r3, r3, #21
 8000b64:	4013      	ands	r3, r2
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b095      	sub	sp, #84	@ 0x54
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	233c      	movs	r3, #60	@ 0x3c
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	0018      	movs	r0, r3
 8000b86:	2314      	movs	r3, #20
 8000b88:	001a      	movs	r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	f002 fe7e 	bl	800388c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b90:	241c      	movs	r4, #28
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	0018      	movs	r0, r3
 8000b96:	2320      	movs	r3, #32
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f002 fe76 	bl	800388c <memset>
  if(huart->Instance==USART1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a46      	ldr	r2, [pc, #280]	@ (8000cc0 <HAL_UART_MspInit+0x148>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d000      	beq.n	8000bac <HAL_UART_MspInit+0x34>
 8000baa:	e084      	b.n	8000cb6 <HAL_UART_MspInit+0x13e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	2201      	movs	r2, #1
 8000bb0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 ff46 	bl	8001a4c <HAL_RCCEx_PeriphCLKConfig>
 8000bc0:	1e03      	subs	r3, r0, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000bc4:	f7ff fd32 	bl	800062c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc8:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc4 <HAL_UART_MspInit+0x14c>)
 8000bca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc4 <HAL_UART_MspInit+0x14c>)
 8000bce:	2180      	movs	r1, #128	@ 0x80
 8000bd0:	01c9      	lsls	r1, r1, #7
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc4 <HAL_UART_MspInit+0x14c>)
 8000bd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bda:	2380      	movs	r3, #128	@ 0x80
 8000bdc:	01db      	lsls	r3, r3, #7
 8000bde:	4013      	ands	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
 8000be2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be4:	4b37      	ldr	r3, [pc, #220]	@ (8000cc4 <HAL_UART_MspInit+0x14c>)
 8000be6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000be8:	4b36      	ldr	r3, [pc, #216]	@ (8000cc4 <HAL_UART_MspInit+0x14c>)
 8000bea:	2104      	movs	r1, #4
 8000bec:	430a      	orrs	r2, r1
 8000bee:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bf0:	4b34      	ldr	r3, [pc, #208]	@ (8000cc4 <HAL_UART_MspInit+0x14c>)
 8000bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfc:	4b31      	ldr	r3, [pc, #196]	@ (8000cc4 <HAL_UART_MspInit+0x14c>)
 8000bfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c00:	4b30      	ldr	r3, [pc, #192]	@ (8000cc4 <HAL_UART_MspInit+0x14c>)
 8000c02:	2102      	movs	r1, #2
 8000c04:	430a      	orrs	r2, r1
 8000c06:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c08:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc4 <HAL_UART_MspInit+0x14c>)
 8000c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc4 <HAL_UART_MspInit+0x14c>)
 8000c16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c18:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <HAL_UART_MspInit+0x14c>)
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c20:	4b28      	ldr	r3, [pc, #160]	@ (8000cc4 <HAL_UART_MspInit+0x14c>)
 8000c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c24:	2201      	movs	r2, #1
 8000c26:	4013      	ands	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000c2c:	213c      	movs	r1, #60	@ 0x3c
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2280      	movs	r2, #128	@ 0x80
 8000c32:	01d2      	lsls	r2, r2, #7
 8000c34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	000c      	movs	r4, r1
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc8 <HAL_UART_MspInit+0x150>)
 8000c54:	0019      	movs	r1, r3
 8000c56:	0010      	movs	r0, r2
 8000c58:	f000 f9ba 	bl	8000fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2204      	movs	r2, #4
 8000c60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	2202      	movs	r2, #2
 8000c66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	4a13      	ldr	r2, [pc, #76]	@ (8000ccc <HAL_UART_MspInit+0x154>)
 8000c7e:	0019      	movs	r1, r3
 8000c80:	0010      	movs	r0, r2
 8000c82:	f000 f9a5 	bl	8000fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c86:	0021      	movs	r1, r4
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2280      	movs	r2, #128	@ 0x80
 8000c8c:	0152      	lsls	r2, r2, #5
 8000c8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2202      	movs	r2, #2
 8000c94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	187a      	adds	r2, r7, r1
 8000caa:	23a0      	movs	r3, #160	@ 0xa0
 8000cac:	05db      	lsls	r3, r3, #23
 8000cae:	0011      	movs	r1, r2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f000 f98d 	bl	8000fd0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b015      	add	sp, #84	@ 0x54
 8000cbc:	bd90      	pop	{r4, r7, pc}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	40013800 	.word	0x40013800
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	50000800 	.word	0x50000800
 8000ccc:	50000400 	.word	0x50000400

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd4:	46c0      	nop			@ (mov r8, r8)
 8000cd6:	e7fd      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cdc:	46c0      	nop			@ (mov r8, r8)
 8000cde:	e7fd      	b.n	8000cdc <HardFault_Handler+0x4>

08000ce0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce4:	46c0      	nop			@ (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf8:	f000 f89a 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfc:	46c0      	nop			@ (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <SystemInit+0x14>)
 8000d0a:	2280      	movs	r2, #128	@ 0x80
 8000d0c:	0512      	lsls	r2, r2, #20
 8000d0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d10:	46c0      	nop			@ (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d1c:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d20:	f7ff fff0 	bl	8000d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d26:	e003      	b.n	8000d30 <LoopCopyDataInit>

08000d28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d28:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000d2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d2e:	3104      	adds	r1, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d30:	480a      	ldr	r0, [pc, #40]	@ (8000d5c <LoopForever+0xa>)
  ldr r3, =_edata
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <LoopForever+0xe>)
  adds r2, r0, r1
 8000d34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d38:	d3f6      	bcc.n	8000d28 <CopyDataInit>
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <LoopForever+0x12>)
  b LoopFillZerobss
 8000d3c:	e002      	b.n	8000d44 <LoopFillZerobss>

08000d3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000d40:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d42:	3204      	adds	r2, #4

08000d44 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <LoopForever+0x16>)
  cmp r2, r3
 8000d46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d48:	d3f9      	bcc.n	8000d3e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000d4a:	f002 fda7 	bl	800389c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d4e:	f7ff fb51 	bl	80003f4 <main>

08000d52 <LoopForever>:

LoopForever:
    b LoopForever
 8000d52:	e7fe      	b.n	8000d52 <LoopForever>
  ldr   r0, =_estack
 8000d54:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8000d58:	08003b8c 	.word	0x08003b8c
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d60:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8000d64:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 8000d68:	20000340 	.word	0x20000340

08000d6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC1_IRQHandler>

08000d6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	f000 f80e 	bl	8000d9c <HAL_InitTick>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d003      	beq.n	8000d8c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	e001      	b.n	8000d90 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d8c:	f7ff fed0 	bl	8000b30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d90:	1dfb      	adds	r3, r7, #7
 8000d92:	781b      	ldrb	r3, [r3, #0]
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b002      	add	sp, #8
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da4:	230f      	movs	r3, #15
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000dac:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <HAL_InitTick+0x88>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d02b      	beq.n	8000e0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000db4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e28 <HAL_InitTick+0x8c>)
 8000db6:	681c      	ldr	r4, [r3, #0]
 8000db8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <HAL_InitTick+0x88>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	23fa      	movs	r3, #250	@ 0xfa
 8000dc0:	0098      	lsls	r0, r3, #2
 8000dc2:	f7ff f9a1 	bl	8000108 <__udivsi3>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	0019      	movs	r1, r3
 8000dca:	0020      	movs	r0, r4
 8000dcc:	f7ff f99c 	bl	8000108 <__udivsi3>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 f8ef 	bl	8000fb6 <HAL_SYSTICK_Config>
 8000dd8:	1e03      	subs	r3, r0, #0
 8000dda:	d112      	bne.n	8000e02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d80a      	bhi.n	8000df8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	2301      	movs	r3, #1
 8000de6:	425b      	negs	r3, r3
 8000de8:	2200      	movs	r2, #0
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 f8ce 	bl	8000f8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <HAL_InitTick+0x90>)
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e00d      	b.n	8000e14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000df8:	230f      	movs	r3, #15
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	e008      	b.n	8000e14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e02:	230f      	movs	r3, #15
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	e003      	b.n	8000e14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e14:	230f      	movs	r3, #15
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	781b      	ldrb	r3, [r3, #0]
}
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b005      	add	sp, #20
 8000e20:	bd90      	pop	{r4, r7, pc}
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	20000080 	.word	0x20000080
 8000e28:	20000078 	.word	0x20000078
 8000e2c:	2000007c 	.word	0x2000007c

08000e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e34:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <HAL_IncTick+0x1c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	001a      	movs	r2, r3
 8000e3a:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <HAL_IncTick+0x20>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	18d2      	adds	r2, r2, r3
 8000e40:	4b03      	ldr	r3, [pc, #12]	@ (8000e50 <HAL_IncTick+0x20>)
 8000e42:	601a      	str	r2, [r3, #0]
}
 8000e44:	46c0      	nop			@ (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	20000080 	.word	0x20000080
 8000e50:	2000033c 	.word	0x2000033c

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b02      	ldr	r3, [pc, #8]	@ (8000e64 <HAL_GetTick+0x10>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	2000033c 	.word	0x2000033c

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	0002      	movs	r2, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e7c:	d828      	bhi.n	8000ed0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f3c <__NVIC_SetPriority+0xd4>)
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	33c0      	adds	r3, #192	@ 0xc0
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	589b      	ldr	r3, [r3, r2]
 8000e8e:	1dfa      	adds	r2, r7, #7
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	0011      	movs	r1, r2
 8000e94:	2203      	movs	r2, #3
 8000e96:	400a      	ands	r2, r1
 8000e98:	00d2      	lsls	r2, r2, #3
 8000e9a:	21ff      	movs	r1, #255	@ 0xff
 8000e9c:	4091      	lsls	r1, r2
 8000e9e:	000a      	movs	r2, r1
 8000ea0:	43d2      	mvns	r2, r2
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	019b      	lsls	r3, r3, #6
 8000eaa:	22ff      	movs	r2, #255	@ 0xff
 8000eac:	401a      	ands	r2, r3
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	4003      	ands	r3, r0
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ebc:	481f      	ldr	r0, [pc, #124]	@ (8000f3c <__NVIC_SetPriority+0xd4>)
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	33c0      	adds	r3, #192	@ 0xc0
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ece:	e031      	b.n	8000f34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f40 <__NVIC_SetPriority+0xd8>)
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	230f      	movs	r3, #15
 8000eda:	400b      	ands	r3, r1
 8000edc:	3b08      	subs	r3, #8
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	3306      	adds	r3, #6
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	18d3      	adds	r3, r2, r3
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	1dfa      	adds	r2, r7, #7
 8000eec:	7812      	ldrb	r2, [r2, #0]
 8000eee:	0011      	movs	r1, r2
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	400a      	ands	r2, r1
 8000ef4:	00d2      	lsls	r2, r2, #3
 8000ef6:	21ff      	movs	r1, #255	@ 0xff
 8000ef8:	4091      	lsls	r1, r2
 8000efa:	000a      	movs	r2, r1
 8000efc:	43d2      	mvns	r2, r2
 8000efe:	401a      	ands	r2, r3
 8000f00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	019b      	lsls	r3, r3, #6
 8000f06:	22ff      	movs	r2, #255	@ 0xff
 8000f08:	401a      	ands	r2, r3
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	0018      	movs	r0, r3
 8000f10:	2303      	movs	r3, #3
 8000f12:	4003      	ands	r3, r0
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f18:	4809      	ldr	r0, [pc, #36]	@ (8000f40 <__NVIC_SetPriority+0xd8>)
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	001c      	movs	r4, r3
 8000f20:	230f      	movs	r3, #15
 8000f22:	4023      	ands	r3, r4
 8000f24:	3b08      	subs	r3, #8
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	3306      	adds	r3, #6
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	18c3      	adds	r3, r0, r3
 8000f30:	3304      	adds	r3, #4
 8000f32:	601a      	str	r2, [r3, #0]
}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b003      	add	sp, #12
 8000f3a:	bd90      	pop	{r4, r7, pc}
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	1e5a      	subs	r2, r3, #1
 8000f50:	2380      	movs	r3, #128	@ 0x80
 8000f52:	045b      	lsls	r3, r3, #17
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d301      	bcc.n	8000f5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e010      	b.n	8000f7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <SysTick_Config+0x44>)
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	3a01      	subs	r2, #1
 8000f62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f64:	2301      	movs	r3, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	2103      	movs	r1, #3
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f7ff ff7c 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f70:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <SysTick_Config+0x44>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f76:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <SysTick_Config+0x44>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	e000e010 	.word	0xe000e010

08000f8c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	210f      	movs	r1, #15
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	1c02      	adds	r2, r0, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff ff5d 	bl	8000e68 <__NVIC_SetPriority>
}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b004      	add	sp, #16
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff ffbf 	bl	8000f44 <SysTick_Config>
 8000fc6:	0003      	movs	r3, r0
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b002      	add	sp, #8
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000fde:	e153      	b.n	8001288 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4091      	lsls	r1, r2
 8000fea:	000a      	movs	r2, r1
 8000fec:	4013      	ands	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d100      	bne.n	8000ff8 <HAL_GPIO_Init+0x28>
 8000ff6:	e144      	b.n	8001282 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x38>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b12      	cmp	r3, #18
 8001006:	d125      	bne.n	8001054 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3208      	adds	r2, #8
 8001010:	0092      	lsls	r2, r2, #2
 8001012:	58d3      	ldr	r3, [r2, r3]
 8001014:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2207      	movs	r2, #7
 800101a:	4013      	ands	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	409a      	lsls	r2, r3
 8001022:	0013      	movs	r3, r2
 8001024:	43da      	mvns	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	4013      	ands	r3, r2
 800102a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	220f      	movs	r2, #15
 8001032:	401a      	ands	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	2107      	movs	r1, #7
 8001038:	400b      	ands	r3, r1
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	409a      	lsls	r2, r3
 800103e:	0013      	movs	r3, r2
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	4313      	orrs	r3, r2
 8001044:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	6979      	ldr	r1, [r7, #20]
 8001052:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	409a      	lsls	r2, r3
 8001062:	0013      	movs	r3, r2
 8001064:	43da      	mvns	r2, r3
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2203      	movs	r2, #3
 8001072:	401a      	ands	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	409a      	lsls	r2, r3
 800107a:	0013      	movs	r3, r2
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	4313      	orrs	r3, r2
 8001080:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d00b      	beq.n	80010a8 <HAL_GPIO_Init+0xd8>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d007      	beq.n	80010a8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800109c:	2b11      	cmp	r3, #17
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b12      	cmp	r3, #18
 80010a6:	d130      	bne.n	800110a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	409a      	lsls	r2, r3
 80010b6:	0013      	movs	r3, r2
 80010b8:	43da      	mvns	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	4013      	ands	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	409a      	lsls	r2, r3
 80010ca:	0013      	movs	r3, r2
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010de:	2201      	movs	r2, #1
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	409a      	lsls	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	43da      	mvns	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	4013      	ands	r3, r2
 80010ec:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	091b      	lsrs	r3, r3, #4
 80010f4:	2201      	movs	r2, #1
 80010f6:	401a      	ands	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	409a      	lsls	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4313      	orrs	r3, r2
 8001102:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d017      	beq.n	8001142 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	43da      	mvns	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	4013      	ands	r3, r2
 8001128:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4313      	orrs	r3, r2
 800113a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	2380      	movs	r3, #128	@ 0x80
 8001148:	055b      	lsls	r3, r3, #21
 800114a:	4013      	ands	r3, r2
 800114c:	d100      	bne.n	8001150 <HAL_GPIO_Init+0x180>
 800114e:	e098      	b.n	8001282 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001150:	4a53      	ldr	r2, [pc, #332]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3318      	adds	r3, #24
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	589b      	ldr	r3, [r3, r2]
 800115c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	2203      	movs	r2, #3
 8001162:	4013      	ands	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	220f      	movs	r2, #15
 8001168:	409a      	lsls	r2, r3
 800116a:	0013      	movs	r3, r2
 800116c:	43da      	mvns	r2, r3
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	4013      	ands	r3, r2
 8001172:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	23a0      	movs	r3, #160	@ 0xa0
 8001178:	05db      	lsls	r3, r3, #23
 800117a:	429a      	cmp	r2, r3
 800117c:	d019      	beq.n	80011b2 <HAL_GPIO_Init+0x1e2>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a48      	ldr	r2, [pc, #288]	@ (80012a4 <HAL_GPIO_Init+0x2d4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_Init+0x1de>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a47      	ldr	r2, [pc, #284]	@ (80012a8 <HAL_GPIO_Init+0x2d8>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00d      	beq.n	80011aa <HAL_GPIO_Init+0x1da>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a46      	ldr	r2, [pc, #280]	@ (80012ac <HAL_GPIO_Init+0x2dc>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d007      	beq.n	80011a6 <HAL_GPIO_Init+0x1d6>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a45      	ldr	r2, [pc, #276]	@ (80012b0 <HAL_GPIO_Init+0x2e0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <HAL_GPIO_Init+0x1d2>
 800119e:	2305      	movs	r3, #5
 80011a0:	e008      	b.n	80011b4 <HAL_GPIO_Init+0x1e4>
 80011a2:	2306      	movs	r3, #6
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x1e4>
 80011a6:	2303      	movs	r3, #3
 80011a8:	e004      	b.n	80011b4 <HAL_GPIO_Init+0x1e4>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e002      	b.n	80011b4 <HAL_GPIO_Init+0x1e4>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <HAL_GPIO_Init+0x1e4>
 80011b2:	2300      	movs	r3, #0
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	2103      	movs	r1, #3
 80011b8:	400a      	ands	r2, r1
 80011ba:	00d2      	lsls	r2, r2, #3
 80011bc:	4093      	lsls	r3, r2
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80011c4:	4936      	ldr	r1, [pc, #216]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3318      	adds	r3, #24
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80011d2:	4a33      	ldr	r2, [pc, #204]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 80011d4:	2380      	movs	r3, #128	@ 0x80
 80011d6:	58d3      	ldr	r3, [r2, r3]
 80011d8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	43da      	mvns	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	4013      	ands	r3, r2
 80011e2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	2380      	movs	r3, #128	@ 0x80
 80011ea:	025b      	lsls	r3, r3, #9
 80011ec:	4013      	ands	r3, r2
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80011f8:	4929      	ldr	r1, [pc, #164]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 80011fa:	2280      	movs	r2, #128	@ 0x80
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001200:	4a27      	ldr	r2, [pc, #156]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001202:	2384      	movs	r3, #132	@ 0x84
 8001204:	58d3      	ldr	r3, [r2, r3]
 8001206:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43da      	mvns	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	4013      	ands	r3, r2
 8001210:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	2380      	movs	r3, #128	@ 0x80
 8001218:	029b      	lsls	r3, r3, #10
 800121a:	4013      	ands	r3, r2
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001226:	491e      	ldr	r1, [pc, #120]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001228:	2284      	movs	r2, #132	@ 0x84
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800122e:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43da      	mvns	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	4013      	ands	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	2380      	movs	r3, #128	@ 0x80
 8001244:	035b      	lsls	r3, r3, #13
 8001246:	4013      	ands	r3, r2
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001252:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43da      	mvns	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	4013      	ands	r3, r2
 8001266:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	2380      	movs	r3, #128	@ 0x80
 800126e:	039b      	lsls	r3, r3, #14
 8001270:	4013      	ands	r3, r2
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	3301      	adds	r3, #1
 8001286:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	40da      	lsrs	r2, r3
 8001290:	1e13      	subs	r3, r2, #0
 8001292:	d000      	beq.n	8001296 <HAL_GPIO_Init+0x2c6>
 8001294:	e6a4      	b.n	8000fe0 <HAL_GPIO_Init+0x10>
  }
}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	46c0      	nop			@ (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b006      	add	sp, #24
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021800 	.word	0x40021800
 80012a4:	50000400 	.word	0x50000400
 80012a8:	50000800 	.word	0x50000800
 80012ac:	50000c00 	.word	0x50000c00
 80012b0:	50001400 	.word	0x50001400

080012b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e20f      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2201      	movs	r2, #1
 80012cc:	4013      	ands	r3, r2
 80012ce:	d100      	bne.n	80012d2 <HAL_RCC_OscConfig+0x1e>
 80012d0:	e069      	b.n	80013a6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012d2:	4bc8      	ldr	r3, [pc, #800]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2238      	movs	r2, #56	@ 0x38
 80012d8:	4013      	ands	r3, r2
 80012da:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d105      	bne.n	80012ee <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d15d      	bne.n	80013a6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e1fb      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	2380      	movs	r3, #128	@ 0x80
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d107      	bne.n	800130a <HAL_RCC_OscConfig+0x56>
 80012fa:	4bbe      	ldr	r3, [pc, #760]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4bbd      	ldr	r3, [pc, #756]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001300:	2180      	movs	r1, #128	@ 0x80
 8001302:	0249      	lsls	r1, r1, #9
 8001304:	430a      	orrs	r2, r1
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	e020      	b.n	800134c <HAL_RCC_OscConfig+0x98>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	23a0      	movs	r3, #160	@ 0xa0
 8001310:	02db      	lsls	r3, r3, #11
 8001312:	429a      	cmp	r2, r3
 8001314:	d10e      	bne.n	8001334 <HAL_RCC_OscConfig+0x80>
 8001316:	4bb7      	ldr	r3, [pc, #732]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4bb6      	ldr	r3, [pc, #728]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 800131c:	2180      	movs	r1, #128	@ 0x80
 800131e:	02c9      	lsls	r1, r1, #11
 8001320:	430a      	orrs	r2, r1
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	4bb3      	ldr	r3, [pc, #716]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4bb2      	ldr	r3, [pc, #712]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 800132a:	2180      	movs	r1, #128	@ 0x80
 800132c:	0249      	lsls	r1, r1, #9
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e00b      	b.n	800134c <HAL_RCC_OscConfig+0x98>
 8001334:	4baf      	ldr	r3, [pc, #700]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4bae      	ldr	r3, [pc, #696]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 800133a:	49af      	ldr	r1, [pc, #700]	@ (80015f8 <HAL_RCC_OscConfig+0x344>)
 800133c:	400a      	ands	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	4bac      	ldr	r3, [pc, #688]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4bab      	ldr	r3, [pc, #684]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001346:	49ad      	ldr	r1, [pc, #692]	@ (80015fc <HAL_RCC_OscConfig+0x348>)
 8001348:	400a      	ands	r2, r1
 800134a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d014      	beq.n	800137e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001354:	f7ff fd7e 	bl	8000e54 <HAL_GetTick>
 8001358:	0003      	movs	r3, r0
 800135a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800135e:	f7ff fd79 	bl	8000e54 <HAL_GetTick>
 8001362:	0002      	movs	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b64      	cmp	r3, #100	@ 0x64
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e1ba      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001370:	4ba0      	ldr	r3, [pc, #640]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2380      	movs	r3, #128	@ 0x80
 8001376:	029b      	lsls	r3, r3, #10
 8001378:	4013      	ands	r3, r2
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0xaa>
 800137c:	e013      	b.n	80013a6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137e:	f7ff fd69 	bl	8000e54 <HAL_GetTick>
 8001382:	0003      	movs	r3, r0
 8001384:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001388:	f7ff fd64 	bl	8000e54 <HAL_GetTick>
 800138c:	0002      	movs	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	@ 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1a5      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800139a:	4b96      	ldr	r3, [pc, #600]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	2380      	movs	r3, #128	@ 0x80
 80013a0:	029b      	lsls	r3, r3, #10
 80013a2:	4013      	ands	r3, r2
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2202      	movs	r2, #2
 80013ac:	4013      	ands	r3, r2
 80013ae:	d100      	bne.n	80013b2 <HAL_RCC_OscConfig+0xfe>
 80013b0:	e086      	b.n	80014c0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b2:	4b90      	ldr	r3, [pc, #576]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2238      	movs	r2, #56	@ 0x38
 80013b8:	4013      	ands	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d12f      	bne.n	8001422 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e18b      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ce:	4b89      	ldr	r3, [pc, #548]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4a8b      	ldr	r2, [pc, #556]	@ (8001600 <HAL_RCC_OscConfig+0x34c>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	021a      	lsls	r2, r3, #8
 80013de:	4b85      	ldr	r3, [pc, #532]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80013e0:	430a      	orrs	r2, r1
 80013e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d112      	bne.n	8001410 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013ea:	4b82      	ldr	r3, [pc, #520]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a85      	ldr	r2, [pc, #532]	@ (8001604 <HAL_RCC_OscConfig+0x350>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	0019      	movs	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	4b7e      	ldr	r3, [pc, #504]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013fe:	4b7d      	ldr	r3, [pc, #500]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	0adb      	lsrs	r3, r3, #11
 8001404:	2207      	movs	r2, #7
 8001406:	4013      	ands	r3, r2
 8001408:	4a7f      	ldr	r2, [pc, #508]	@ (8001608 <HAL_RCC_OscConfig+0x354>)
 800140a:	40da      	lsrs	r2, r3
 800140c:	4b7f      	ldr	r3, [pc, #508]	@ (800160c <HAL_RCC_OscConfig+0x358>)
 800140e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001410:	4b7f      	ldr	r3, [pc, #508]	@ (8001610 <HAL_RCC_OscConfig+0x35c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff fcc1 	bl	8000d9c <HAL_InitTick>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d050      	beq.n	80014c0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e161      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d030      	beq.n	800148c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800142a:	4b72      	ldr	r3, [pc, #456]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a75      	ldr	r2, [pc, #468]	@ (8001604 <HAL_RCC_OscConfig+0x350>)
 8001430:	4013      	ands	r3, r2
 8001432:	0019      	movs	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	4b6e      	ldr	r3, [pc, #440]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 800143a:	430a      	orrs	r2, r1
 800143c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800143e:	4b6d      	ldr	r3, [pc, #436]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4b6c      	ldr	r3, [pc, #432]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001444:	2180      	movs	r1, #128	@ 0x80
 8001446:	0049      	lsls	r1, r1, #1
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fd02 	bl	8000e54 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001456:	f7ff fcfd 	bl	8000e54 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e13e      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001468:	4b62      	ldr	r3, [pc, #392]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4013      	ands	r3, r2
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001474:	4b5f      	ldr	r3, [pc, #380]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	4a61      	ldr	r2, [pc, #388]	@ (8001600 <HAL_RCC_OscConfig+0x34c>)
 800147a:	4013      	ands	r3, r2
 800147c:	0019      	movs	r1, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	021a      	lsls	r2, r3, #8
 8001484:	4b5b      	ldr	r3, [pc, #364]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	e019      	b.n	80014c0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800148c:	4b59      	ldr	r3, [pc, #356]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b58      	ldr	r3, [pc, #352]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001492:	4960      	ldr	r1, [pc, #384]	@ (8001614 <HAL_RCC_OscConfig+0x360>)
 8001494:	400a      	ands	r2, r1
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fcdc 	bl	8000e54 <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80014a2:	f7ff fcd7 	bl	8000e54 <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e118      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014b4:	4b4f      	ldr	r3, [pc, #316]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2380      	movs	r3, #128	@ 0x80
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4013      	ands	r3, r2
 80014be:	d1f0      	bne.n	80014a2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2208      	movs	r2, #8
 80014c6:	4013      	ands	r3, r2
 80014c8:	d042      	beq.n	8001550 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80014ca:	4b4a      	ldr	r3, [pc, #296]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2238      	movs	r2, #56	@ 0x38
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b18      	cmp	r3, #24
 80014d4:	d105      	bne.n	80014e2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d138      	bne.n	8001550 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e101      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d019      	beq.n	800151e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014ea:	4b42      	ldr	r3, [pc, #264]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80014ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014ee:	4b41      	ldr	r3, [pc, #260]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80014f0:	2101      	movs	r1, #1
 80014f2:	430a      	orrs	r2, r1
 80014f4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff fcad 	bl	8000e54 <HAL_GetTick>
 80014fa:	0003      	movs	r3, r0
 80014fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001500:	f7ff fca8 	bl	8000e54 <HAL_GetTick>
 8001504:	0002      	movs	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e0e9      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001512:	4b38      	ldr	r3, [pc, #224]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001516:	2202      	movs	r2, #2
 8001518:	4013      	ands	r3, r2
 800151a:	d0f1      	beq.n	8001500 <HAL_RCC_OscConfig+0x24c>
 800151c:	e018      	b.n	8001550 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800151e:	4b35      	ldr	r3, [pc, #212]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001520:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001522:	4b34      	ldr	r3, [pc, #208]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001524:	2101      	movs	r1, #1
 8001526:	438a      	bics	r2, r1
 8001528:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff fc93 	bl	8000e54 <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001534:	f7ff fc8e 	bl	8000e54 <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e0cf      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001546:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154a:	2202      	movs	r2, #2
 800154c:	4013      	ands	r3, r2
 800154e:	d1f1      	bne.n	8001534 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2204      	movs	r2, #4
 8001556:	4013      	ands	r3, r2
 8001558:	d100      	bne.n	800155c <HAL_RCC_OscConfig+0x2a8>
 800155a:	e084      	b.n	8001666 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155c:	230f      	movs	r3, #15
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001564:	4b23      	ldr	r3, [pc, #140]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2238      	movs	r2, #56	@ 0x38
 800156a:	4013      	ands	r3, r2
 800156c:	2b20      	cmp	r3, #32
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d000      	beq.n	800157a <HAL_RCC_OscConfig+0x2c6>
 8001578:	e075      	b.n	8001666 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e0b3      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d106      	bne.n	8001594 <HAL_RCC_OscConfig+0x2e0>
 8001586:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 8001588:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 800158c:	2101      	movs	r1, #1
 800158e:	430a      	orrs	r2, r1
 8001590:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001592:	e01c      	b.n	80015ce <HAL_RCC_OscConfig+0x31a>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b05      	cmp	r3, #5
 800159a:	d10c      	bne.n	80015b6 <HAL_RCC_OscConfig+0x302>
 800159c:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 800159e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015a0:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80015a2:	2104      	movs	r1, #4
 80015a4:	430a      	orrs	r2, r1
 80015a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80015aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	430a      	orrs	r2, r1
 80015b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015b4:	e00b      	b.n	80015ce <HAL_RCC_OscConfig+0x31a>
 80015b6:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80015b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80015bc:	2101      	movs	r1, #1
 80015be:	438a      	bics	r2, r1
 80015c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80015c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015c6:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <HAL_RCC_OscConfig+0x340>)
 80015c8:	2104      	movs	r1, #4
 80015ca:	438a      	bics	r2, r1
 80015cc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d028      	beq.n	8001628 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d6:	f7ff fc3d 	bl	8000e54 <HAL_GetTick>
 80015da:	0003      	movs	r3, r0
 80015dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80015de:	e01d      	b.n	800161c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7ff fc38 	bl	8000e54 <HAL_GetTick>
 80015e4:	0002      	movs	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001618 <HAL_RCC_OscConfig+0x364>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d915      	bls.n	800161c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e078      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>
 80015f4:	40021000 	.word	0x40021000
 80015f8:	fffeffff 	.word	0xfffeffff
 80015fc:	fffbffff 	.word	0xfffbffff
 8001600:	ffff80ff 	.word	0xffff80ff
 8001604:	ffffc7ff 	.word	0xffffc7ff
 8001608:	02dc6c00 	.word	0x02dc6c00
 800160c:	20000078 	.word	0x20000078
 8001610:	2000007c 	.word	0x2000007c
 8001614:	fffffeff 	.word	0xfffffeff
 8001618:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800161c:	4b34      	ldr	r3, [pc, #208]	@ (80016f0 <HAL_RCC_OscConfig+0x43c>)
 800161e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001620:	2202      	movs	r2, #2
 8001622:	4013      	ands	r3, r2
 8001624:	d0dc      	beq.n	80015e0 <HAL_RCC_OscConfig+0x32c>
 8001626:	e013      	b.n	8001650 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fc14 	bl	8000e54 <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001630:	e009      	b.n	8001646 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7ff fc0f 	bl	8000e54 <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4a2d      	ldr	r2, [pc, #180]	@ (80016f4 <HAL_RCC_OscConfig+0x440>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e04f      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001646:	4b2a      	ldr	r3, [pc, #168]	@ (80016f0 <HAL_RCC_OscConfig+0x43c>)
 8001648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800164a:	2202      	movs	r2, #2
 800164c:	4013      	ands	r3, r2
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001650:	230f      	movs	r3, #15
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d105      	bne.n	8001666 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800165a:	4b25      	ldr	r3, [pc, #148]	@ (80016f0 <HAL_RCC_OscConfig+0x43c>)
 800165c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800165e:	4b24      	ldr	r3, [pc, #144]	@ (80016f0 <HAL_RCC_OscConfig+0x43c>)
 8001660:	4925      	ldr	r1, [pc, #148]	@ (80016f8 <HAL_RCC_OscConfig+0x444>)
 8001662:	400a      	ands	r2, r1
 8001664:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2210      	movs	r2, #16
 800166c:	4013      	ands	r3, r2
 800166e:	d039      	beq.n	80016e4 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01b      	beq.n	80016b0 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001678:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <HAL_RCC_OscConfig+0x43c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <HAL_RCC_OscConfig+0x43c>)
 800167e:	2180      	movs	r1, #128	@ 0x80
 8001680:	03c9      	lsls	r1, r1, #15
 8001682:	430a      	orrs	r2, r1
 8001684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001686:	f7ff fbe5 	bl	8000e54 <HAL_GetTick>
 800168a:	0003      	movs	r3, r0
 800168c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001690:	f7ff fbe0 	bl	8000e54 <HAL_GetTick>
 8001694:	0002      	movs	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e021      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80016a2:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <HAL_RCC_OscConfig+0x43c>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	041b      	lsls	r3, r3, #16
 80016aa:	4013      	ands	r3, r2
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x3dc>
 80016ae:	e019      	b.n	80016e4 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016b0:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <HAL_RCC_OscConfig+0x43c>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <HAL_RCC_OscConfig+0x43c>)
 80016b6:	4911      	ldr	r1, [pc, #68]	@ (80016fc <HAL_RCC_OscConfig+0x448>)
 80016b8:	400a      	ands	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016bc:	f7ff fbca 	bl	8000e54 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016c6:	f7ff fbc5 	bl	8000e54 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e006      	b.n	80016e6 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80016d8:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <HAL_RCC_OscConfig+0x43c>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	041b      	lsls	r3, r3, #16
 80016e0:	4013      	ands	r3, r2
 80016e2:	d1f0      	bne.n	80016c6 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b006      	add	sp, #24
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	40021000 	.word	0x40021000
 80016f4:	00001388 	.word	0x00001388
 80016f8:	efffffff 	.word	0xefffffff
 80016fc:	ffbfffff 	.word	0xffbfffff

08001700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0f6      	b.n	8001902 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001714:	4b7d      	ldr	r3, [pc, #500]	@ (800190c <HAL_RCC_ClockConfig+0x20c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2207      	movs	r2, #7
 800171a:	4013      	ands	r3, r2
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d91e      	bls.n	8001760 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b7a      	ldr	r3, [pc, #488]	@ (800190c <HAL_RCC_ClockConfig+0x20c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2207      	movs	r2, #7
 8001728:	4393      	bics	r3, r2
 800172a:	0019      	movs	r1, r3
 800172c:	4b77      	ldr	r3, [pc, #476]	@ (800190c <HAL_RCC_ClockConfig+0x20c>)
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001734:	f7ff fb8e 	bl	8000e54 <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800173c:	e009      	b.n	8001752 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800173e:	f7ff fb89 	bl	8000e54 <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	4a71      	ldr	r2, [pc, #452]	@ (8001910 <HAL_RCC_ClockConfig+0x210>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e0d7      	b.n	8001902 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001752:	4b6e      	ldr	r3, [pc, #440]	@ (800190c <HAL_RCC_ClockConfig+0x20c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2207      	movs	r2, #7
 8001758:	4013      	ands	r3, r2
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d1ee      	bne.n	800173e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2202      	movs	r2, #2
 8001766:	4013      	ands	r3, r2
 8001768:	d017      	beq.n	800179a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2204      	movs	r2, #4
 8001770:	4013      	ands	r3, r2
 8001772:	d008      	beq.n	8001786 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001774:	4b67      	ldr	r3, [pc, #412]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a67      	ldr	r2, [pc, #412]	@ (8001918 <HAL_RCC_ClockConfig+0x218>)
 800177a:	401a      	ands	r2, r3
 800177c:	4b65      	ldr	r3, [pc, #404]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 800177e:	21b0      	movs	r1, #176	@ 0xb0
 8001780:	0109      	lsls	r1, r1, #4
 8001782:	430a      	orrs	r2, r1
 8001784:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001786:	4b63      	ldr	r3, [pc, #396]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4a64      	ldr	r2, [pc, #400]	@ (800191c <HAL_RCC_ClockConfig+0x21c>)
 800178c:	4013      	ands	r3, r2
 800178e:	0019      	movs	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	4b5f      	ldr	r3, [pc, #380]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 8001796:	430a      	orrs	r2, r1
 8001798:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	4013      	ands	r3, r2
 80017a2:	d100      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xa6>
 80017a4:	e061      	b.n	800186a <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80017a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	221c      	movs	r2, #28
 80017ac:	4393      	bics	r3, r2
 80017ae:	0019      	movs	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	4b57      	ldr	r3, [pc, #348]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017c2:	4b54      	ldr	r3, [pc, #336]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	@ 0x80
 80017c8:	029b      	lsls	r3, r3, #10
 80017ca:	4013      	ands	r3, r2
 80017cc:	d12b      	bne.n	8001826 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e097      	b.n	8001902 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017da:	4b4e      	ldr	r3, [pc, #312]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2380      	movs	r3, #128	@ 0x80
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4013      	ands	r3, r2
 80017e4:	d11f      	bne.n	8001826 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e08b      	b.n	8001902 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80017f2:	4b48      	ldr	r3, [pc, #288]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	@ 0x80
 80017f8:	041b      	lsls	r3, r3, #16
 80017fa:	4013      	ands	r3, r2
 80017fc:	d113      	bne.n	8001826 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e07f      	b.n	8001902 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d106      	bne.n	8001818 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800180a:	4b42      	ldr	r3, [pc, #264]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 800180c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800180e:	2202      	movs	r2, #2
 8001810:	4013      	ands	r3, r2
 8001812:	d108      	bne.n	8001826 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e074      	b.n	8001902 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001818:	4b3e      	ldr	r3, [pc, #248]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 800181a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181c:	2202      	movs	r2, #2
 800181e:	4013      	ands	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e06d      	b.n	8001902 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001826:	4b3b      	ldr	r3, [pc, #236]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2207      	movs	r2, #7
 800182c:	4393      	bics	r3, r2
 800182e:	0019      	movs	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4b37      	ldr	r3, [pc, #220]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 8001836:	430a      	orrs	r2, r1
 8001838:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800183a:	f7ff fb0b 	bl	8000e54 <HAL_GetTick>
 800183e:	0003      	movs	r3, r0
 8001840:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	e009      	b.n	8001858 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001844:	f7ff fb06 	bl	8000e54 <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	4a30      	ldr	r2, [pc, #192]	@ (8001910 <HAL_RCC_ClockConfig+0x210>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e054      	b.n	8001902 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001858:	4b2e      	ldr	r3, [pc, #184]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2238      	movs	r2, #56	@ 0x38
 800185e:	401a      	ands	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	429a      	cmp	r2, r3
 8001868:	d1ec      	bne.n	8001844 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800186a:	4b28      	ldr	r3, [pc, #160]	@ (800190c <HAL_RCC_ClockConfig+0x20c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2207      	movs	r2, #7
 8001870:	4013      	ands	r3, r2
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d21e      	bcs.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001878:	4b24      	ldr	r3, [pc, #144]	@ (800190c <HAL_RCC_ClockConfig+0x20c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2207      	movs	r2, #7
 800187e:	4393      	bics	r3, r2
 8001880:	0019      	movs	r1, r3
 8001882:	4b22      	ldr	r3, [pc, #136]	@ (800190c <HAL_RCC_ClockConfig+0x20c>)
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800188a:	f7ff fae3 	bl	8000e54 <HAL_GetTick>
 800188e:	0003      	movs	r3, r0
 8001890:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001892:	e009      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f7ff fade 	bl	8000e54 <HAL_GetTick>
 8001898:	0002      	movs	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	4a1c      	ldr	r2, [pc, #112]	@ (8001910 <HAL_RCC_ClockConfig+0x210>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e02c      	b.n	8001902 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018a8:	4b18      	ldr	r3, [pc, #96]	@ (800190c <HAL_RCC_ClockConfig+0x20c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2207      	movs	r2, #7
 80018ae:	4013      	ands	r3, r2
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d1ee      	bne.n	8001894 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2204      	movs	r2, #4
 80018bc:	4013      	ands	r3, r2
 80018be:	d009      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4a16      	ldr	r2, [pc, #88]	@ (8001920 <HAL_RCC_ClockConfig+0x220>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	0019      	movs	r1, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 80018d0:	430a      	orrs	r2, r1
 80018d2:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80018d4:	f000 f82c 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 80018d8:	0001      	movs	r1, r0
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <HAL_RCC_ClockConfig+0x214>)
 80018dc:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	220f      	movs	r2, #15
 80018e2:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80018e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <HAL_RCC_ClockConfig+0x224>)
 80018e6:	0092      	lsls	r2, r2, #2
 80018e8:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018ea:	221f      	movs	r2, #31
 80018ec:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80018ee:	000a      	movs	r2, r1
 80018f0:	40da      	lsrs	r2, r3
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <HAL_RCC_ClockConfig+0x228>)
 80018f4:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018f6:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <HAL_RCC_ClockConfig+0x22c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	0018      	movs	r0, r3
 80018fc:	f7ff fa4e 	bl	8000d9c <HAL_InitTick>
 8001900:	0003      	movs	r3, r0
}
 8001902:	0018      	movs	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	b004      	add	sp, #16
 8001908:	bd80      	pop	{r7, pc}
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	40022000 	.word	0x40022000
 8001910:	00001388 	.word	0x00001388
 8001914:	40021000 	.word	0x40021000
 8001918:	ffff84ff 	.word	0xffff84ff
 800191c:	fffff0ff 	.word	0xfffff0ff
 8001920:	ffff8fff 	.word	0xffff8fff
 8001924:	08003afc 	.word	0x08003afc
 8001928:	20000078 	.word	0x20000078
 800192c:	2000007c 	.word	0x2000007c

08001930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8001936:	4b27      	ldr	r3, [pc, #156]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	2207      	movs	r2, #7
 800193e:	4013      	ands	r3, r2
 8001940:	3301      	adds	r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001944:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2238      	movs	r2, #56	@ 0x38
 800194a:	4013      	ands	r3, r2
 800194c:	d10f      	bne.n	800196e <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800194e:	4b21      	ldr	r3, [pc, #132]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	0adb      	lsrs	r3, r3, #11
 8001954:	2207      	movs	r2, #7
 8001956:	4013      	ands	r3, r2
 8001958:	2201      	movs	r2, #1
 800195a:	409a      	lsls	r2, r3
 800195c:	0013      	movs	r3, r2
 800195e:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	481d      	ldr	r0, [pc, #116]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001964:	f7fe fbd0 	bl	8000108 <__udivsi3>
 8001968:	0003      	movs	r3, r0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	e027      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800196e:	4b19      	ldr	r3, [pc, #100]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2238      	movs	r2, #56	@ 0x38
 8001974:	4013      	ands	r3, r2
 8001976:	2b08      	cmp	r3, #8
 8001978:	d102      	bne.n	8001980 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800197a:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <HAL_RCC_GetSysClockFreq+0xac>)
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e01e      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001980:	4b14      	ldr	r3, [pc, #80]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2238      	movs	r2, #56	@ 0x38
 8001986:	4013      	ands	r3, r2
 8001988:	2b20      	cmp	r3, #32
 800198a:	d103      	bne.n	8001994 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800198c:	2380      	movs	r3, #128	@ 0x80
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e014      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2238      	movs	r2, #56	@ 0x38
 800199a:	4013      	ands	r3, r2
 800199c:	2b18      	cmp	r3, #24
 800199e:	d103      	bne.n	80019a8 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019a0:	23fa      	movs	r3, #250	@ 0xfa
 80019a2:	01db      	lsls	r3, r3, #7
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e00a      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 80019a8:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2238      	movs	r2, #56	@ 0x38
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b10      	cmp	r3, #16
 80019b2:	d102      	bne.n	80019ba <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 80019b4:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0xa8>)
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e001      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7fe fba1 	bl	8000108 <__udivsi3>
 80019c6:	0003      	movs	r3, r0
 80019c8:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	0018      	movs	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b004      	add	sp, #16
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	02dc6c00 	.word	0x02dc6c00
 80019dc:	007a1200 	.word	0x007a1200

080019e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80019e4:	f7ff ffa4 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 80019e8:	0001      	movs	r1, r0
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <HAL_RCC_GetHCLKFreq+0x30>)
 80019ec:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	220f      	movs	r2, #15
 80019f2:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80019f4:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <HAL_RCC_GetHCLKFreq+0x34>)
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80019fa:	221f      	movs	r2, #31
 80019fc:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80019fe:	000a      	movs	r2, r1
 8001a00:	40da      	lsrs	r2, r3
 8001a02:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_RCC_GetHCLKFreq+0x38>)
 8001a04:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001a06:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <HAL_RCC_GetHCLKFreq+0x38>)
 8001a08:	681b      	ldr	r3, [r3, #0]
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40021000 	.word	0x40021000
 8001a14:	08003afc 	.word	0x08003afc
 8001a18:	20000078 	.word	0x20000078

08001a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001a20:	f7ff ffde 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 8001a24:	0001      	movs	r1, r0
 8001a26:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	0b1b      	lsrs	r3, r3, #12
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	401a      	ands	r2, r3
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	58d3      	ldr	r3, [r2, r3]
 8001a36:	221f      	movs	r2, #31
 8001a38:	4013      	ands	r3, r2
 8001a3a:	40d9      	lsrs	r1, r3
 8001a3c:	000b      	movs	r3, r1
}
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40021000 	.word	0x40021000
 8001a48:	08003b3c 	.word	0x08003b3c

08001a4c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001a54:	2313      	movs	r3, #19
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a5c:	2312      	movs	r3, #18
 8001a5e:	18fb      	adds	r3, r7, r3
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2240      	movs	r2, #64	@ 0x40
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d100      	bne.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8001a6e:	e079      	b.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a70:	2011      	movs	r0, #17
 8001a72:	183b      	adds	r3, r7, r0
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a78:	4b6a      	ldr	r3, [pc, #424]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001a7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	055b      	lsls	r3, r3, #21
 8001a80:	4013      	ands	r3, r2
 8001a82:	d110      	bne.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a84:	4b67      	ldr	r3, [pc, #412]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a88:	4b66      	ldr	r3, [pc, #408]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001a8a:	2180      	movs	r1, #128	@ 0x80
 8001a8c:	0549      	lsls	r1, r1, #21
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a92:	4b64      	ldr	r3, [pc, #400]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001a94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a96:	2380      	movs	r3, #128	@ 0x80
 8001a98:	055b      	lsls	r3, r3, #21
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa0:	183b      	adds	r3, r7, r0
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001aa6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001aa8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aaa:	23c0      	movs	r3, #192	@ 0xc0
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d019      	beq.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d014      	beq.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001ac2:	4b58      	ldr	r3, [pc, #352]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac6:	4a58      	ldr	r2, [pc, #352]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001acc:	4b55      	ldr	r3, [pc, #340]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ace:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ad0:	4b54      	ldr	r3, [pc, #336]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ad2:	2180      	movs	r1, #128	@ 0x80
 8001ad4:	0249      	lsls	r1, r1, #9
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ada:	4b52      	ldr	r3, [pc, #328]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001adc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ade:	4b51      	ldr	r3, [pc, #324]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ae0:	4952      	ldr	r1, [pc, #328]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2201      	movs	r2, #1
 8001af0:	4013      	ands	r3, r2
 8001af2:	d016      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff f9ae 	bl	8000e54 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001afc:	e00c      	b.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7ff f9a9 	bl	8000e54 <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	4a49      	ldr	r2, [pc, #292]	@ (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d904      	bls.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8001b0e:	2313      	movs	r3, #19
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2203      	movs	r2, #3
 8001b14:	701a      	strb	r2, [r3, #0]
          break;
 8001b16:	e004      	b.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001b18:	4b42      	ldr	r3, [pc, #264]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d0ed      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8001b22:	2313      	movs	r3, #19
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10a      	bne.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b30:	4a3d      	ldr	r2, [pc, #244]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	0019      	movs	r1, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69da      	ldr	r2, [r3, #28]
 8001b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b40:	e005      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b42:	2312      	movs	r3, #18
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	2213      	movs	r2, #19
 8001b48:	18ba      	adds	r2, r7, r2
 8001b4a:	7812      	ldrb	r2, [r2, #0]
 8001b4c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b4e:	2311      	movs	r3, #17
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d105      	bne.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b58:	4b32      	ldr	r3, [pc, #200]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b5c:	4b31      	ldr	r3, [pc, #196]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b5e:	4935      	ldr	r1, [pc, #212]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b60:	400a      	ands	r2, r1
 8001b62:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d009      	beq.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b72:	2203      	movs	r2, #3
 8001b74:	4393      	bics	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	4b29      	ldr	r3, [pc, #164]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2202      	movs	r2, #2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d009      	beq.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b8c:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b90:	4a29      	ldr	r2, [pc, #164]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	4b22      	ldr	r3, [pc, #136]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d008      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001baa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	0899      	lsrs	r1, r3, #2
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699a      	ldr	r2, [r3, #24]
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2208      	movs	r2, #8
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d009      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bc6:	4b17      	ldr	r3, [pc, #92]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bca:	4a1c      	ldr	r2, [pc, #112]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	0019      	movs	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2204      	movs	r2, #4
 8001be0:	4013      	ands	r3, r2
 8001be2:	d009      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001be4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be8:	4a15      	ldr	r2, [pc, #84]	@ (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	0019      	movs	r1, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691a      	ldr	r2, [r3, #16]
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2280      	movs	r2, #128	@ 0x80
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d009      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001c02:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	22e0      	movs	r2, #224	@ 0xe0
 8001c08:	4393      	bics	r3, r2
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c12:	430a      	orrs	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001c16:	2312      	movs	r3, #18
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	781b      	ldrb	r3, [r3, #0]
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b006      	add	sp, #24
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	fffffcff 	.word	0xfffffcff
 8001c2c:	fffeffff 	.word	0xfffeffff
 8001c30:	00001388 	.word	0x00001388
 8001c34:	efffffff 	.word	0xefffffff
 8001c38:	ffffcfff 	.word	0xffffcfff
 8001c3c:	ffffefff 	.word	0xffffefff
 8001c40:	ffff3fff 	.word	0xffff3fff

08001c44 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08c      	sub	sp, #48	@ 0x30
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	1dbb      	adds	r3, r7, #6
 8001c50:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2288      	movs	r2, #136	@ 0x88
 8001c56:	589b      	ldr	r3, [r3, r2]
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	d000      	beq.n	8001c5e <HAL_UART_Transmit_IT+0x1a>
 8001c5c:	e08d      	b.n	8001d7a <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_UART_Transmit_IT+0x28>
 8001c64:	1dbb      	adds	r3, r7, #6
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e085      	b.n	8001d7c <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	2380      	movs	r3, #128	@ 0x80
 8001c76:	015b      	lsls	r3, r3, #5
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d109      	bne.n	8001c90 <HAL_UART_Transmit_IT+0x4c>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2201      	movs	r2, #1
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e075      	b.n	8001d7c <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1dba      	adds	r2, r7, #6
 8001c9a:	2154      	movs	r1, #84	@ 0x54
 8001c9c:	8812      	ldrh	r2, [r2, #0]
 8001c9e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1dba      	adds	r2, r7, #6
 8001ca4:	2156      	movs	r1, #86	@ 0x56
 8001ca6:	8812      	ldrh	r2, [r2, #0]
 8001ca8:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2290      	movs	r2, #144	@ 0x90
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2288      	movs	r2, #136	@ 0x88
 8001cbc:	2121      	movs	r1, #33	@ 0x21
 8001cbe:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001cc4:	2380      	movs	r3, #128	@ 0x80
 8001cc6:	059b      	lsls	r3, r3, #22
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d12a      	bne.n	8001d22 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	2380      	movs	r3, #128	@ 0x80
 8001cd2:	015b      	lsls	r3, r3, #5
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d107      	bne.n	8001ce8 <HAL_UART_Transmit_IT+0xa4>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d103      	bne.n	8001ce8 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4a28      	ldr	r2, [pc, #160]	@ (8001d84 <HAL_UART_Transmit_IT+0x140>)
 8001ce4:	679a      	str	r2, [r3, #120]	@ 0x78
 8001ce6:	e002      	b.n	8001cee <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4a27      	ldr	r2, [pc, #156]	@ (8001d88 <HAL_UART_Transmit_IT+0x144>)
 8001cec:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001cee:	f3ef 8310 	mrs	r3, PRIMASK
 8001cf2:	61fb      	str	r3, [r7, #28]
  return(result);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8001cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	f383 8810 	msr	PRIMASK, r3
}
 8001d02:	46c0      	nop			@ (mov r8, r8)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2180      	movs	r1, #128	@ 0x80
 8001d10:	0409      	lsls	r1, r1, #16
 8001d12:	430a      	orrs	r2, r1
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	f383 8810 	msr	PRIMASK, r3
}
 8001d20:	e029      	b.n	8001d76 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	2380      	movs	r3, #128	@ 0x80
 8001d28:	015b      	lsls	r3, r3, #5
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d107      	bne.n	8001d3e <HAL_UART_Transmit_IT+0xfa>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d103      	bne.n	8001d3e <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4a14      	ldr	r2, [pc, #80]	@ (8001d8c <HAL_UART_Transmit_IT+0x148>)
 8001d3a:	679a      	str	r2, [r3, #120]	@ 0x78
 8001d3c:	e002      	b.n	8001d44 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <HAL_UART_Transmit_IT+0x14c>)
 8001d42:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001d44:	f3ef 8310 	mrs	r3, PRIMASK
 8001d48:	613b      	str	r3, [r7, #16]
  return(result);
 8001d4a:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d4e:	2301      	movs	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f383 8810 	msr	PRIMASK, r3
}
 8001d58:	46c0      	nop			@ (mov r8, r8)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2180      	movs	r1, #128	@ 0x80
 8001d66:	430a      	orrs	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	f383 8810 	msr	PRIMASK, r3
}
 8001d74:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
  }
}
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b00c      	add	sp, #48	@ 0x30
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	080029c9 	.word	0x080029c9
 8001d88:	080028dd 	.word	0x080028dd
 8001d8c:	0800281d 	.word	0x0800281d
 8001d90:	08002769 	.word	0x08002769

08001d94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001d9c:	46c0      	nop			@ (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b002      	add	sp, #8
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	000a      	movs	r2, r1
 8001dae:	1cbb      	adds	r3, r7, #2
 8001db0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b002      	add	sp, #8
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001dc4:	231e      	movs	r3, #30
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4aab      	ldr	r2, [pc, #684]	@ (8002098 <UART_SetConfig+0x2dc>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	0019      	movs	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4aa6      	ldr	r2, [pc, #664]	@ (800209c <UART_SetConfig+0x2e0>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a9d      	ldr	r2, [pc, #628]	@ (80020a0 <UART_SetConfig+0x2e4>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3e:	220f      	movs	r2, #15
 8001e40:	4393      	bics	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a93      	ldr	r2, [pc, #588]	@ (80020a4 <UART_SetConfig+0x2e8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d127      	bne.n	8001eaa <UART_SetConfig+0xee>
 8001e5a:	4b93      	ldr	r3, [pc, #588]	@ (80020a8 <UART_SetConfig+0x2ec>)
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5e:	2203      	movs	r2, #3
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d017      	beq.n	8001e96 <UART_SetConfig+0xda>
 8001e66:	d81b      	bhi.n	8001ea0 <UART_SetConfig+0xe4>
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d00a      	beq.n	8001e82 <UART_SetConfig+0xc6>
 8001e6c:	d818      	bhi.n	8001ea0 <UART_SetConfig+0xe4>
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <UART_SetConfig+0xbc>
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d00a      	beq.n	8001e8c <UART_SetConfig+0xd0>
 8001e76:	e013      	b.n	8001ea0 <UART_SetConfig+0xe4>
 8001e78:	231f      	movs	r3, #31
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
 8001e80:	e021      	b.n	8001ec6 <UART_SetConfig+0x10a>
 8001e82:	231f      	movs	r3, #31
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	2202      	movs	r2, #2
 8001e88:	701a      	strb	r2, [r3, #0]
 8001e8a:	e01c      	b.n	8001ec6 <UART_SetConfig+0x10a>
 8001e8c:	231f      	movs	r3, #31
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	2204      	movs	r2, #4
 8001e92:	701a      	strb	r2, [r3, #0]
 8001e94:	e017      	b.n	8001ec6 <UART_SetConfig+0x10a>
 8001e96:	231f      	movs	r3, #31
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e012      	b.n	8001ec6 <UART_SetConfig+0x10a>
 8001ea0:	231f      	movs	r3, #31
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	e00d      	b.n	8001ec6 <UART_SetConfig+0x10a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a7f      	ldr	r2, [pc, #508]	@ (80020ac <UART_SetConfig+0x2f0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d104      	bne.n	8001ebe <UART_SetConfig+0x102>
 8001eb4:	231f      	movs	r3, #31
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
 8001ebc:	e003      	b.n	8001ec6 <UART_SetConfig+0x10a>
 8001ebe:	231f      	movs	r3, #31
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69da      	ldr	r2, [r3, #28]
 8001eca:	2380      	movs	r3, #128	@ 0x80
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d000      	beq.n	8001ed4 <UART_SetConfig+0x118>
 8001ed2:	e06f      	b.n	8001fb4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8001ed4:	231f      	movs	r3, #31
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d01f      	beq.n	8001f1e <UART_SetConfig+0x162>
 8001ede:	dc22      	bgt.n	8001f26 <UART_SetConfig+0x16a>
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d017      	beq.n	8001f14 <UART_SetConfig+0x158>
 8001ee4:	dc1f      	bgt.n	8001f26 <UART_SetConfig+0x16a>
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <UART_SetConfig+0x134>
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d005      	beq.n	8001efa <UART_SetConfig+0x13e>
 8001eee:	e01a      	b.n	8001f26 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ef0:	f7ff fd94 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	61bb      	str	r3, [r7, #24]
        break;
 8001ef8:	e01c      	b.n	8001f34 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001efa:	4b6b      	ldr	r3, [pc, #428]	@ (80020a8 <UART_SetConfig+0x2ec>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	2207      	movs	r2, #7
 8001f02:	4013      	ands	r3, r2
 8001f04:	3301      	adds	r3, #1
 8001f06:	0019      	movs	r1, r3
 8001f08:	4869      	ldr	r0, [pc, #420]	@ (80020b0 <UART_SetConfig+0x2f4>)
 8001f0a:	f7fe f8fd 	bl	8000108 <__udivsi3>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	61bb      	str	r3, [r7, #24]
        break;
 8001f12:	e00f      	b.n	8001f34 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f14:	f7ff fd0c 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	61bb      	str	r3, [r7, #24]
        break;
 8001f1c:	e00a      	b.n	8001f34 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f1e:	2380      	movs	r3, #128	@ 0x80
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	61bb      	str	r3, [r7, #24]
        break;
 8001f24:	e006      	b.n	8001f34 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f2a:	231e      	movs	r3, #30
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
        break;
 8001f32:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d100      	bne.n	8001f3c <UART_SetConfig+0x180>
 8001f3a:	e097      	b.n	800206c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f40:	4b5c      	ldr	r3, [pc, #368]	@ (80020b4 <UART_SetConfig+0x2f8>)
 8001f42:	0052      	lsls	r2, r2, #1
 8001f44:	5ad3      	ldrh	r3, [r2, r3]
 8001f46:	0019      	movs	r1, r3
 8001f48:	69b8      	ldr	r0, [r7, #24]
 8001f4a:	f7fe f8dd 	bl	8000108 <__udivsi3>
 8001f4e:	0003      	movs	r3, r0
 8001f50:	005a      	lsls	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	085b      	lsrs	r3, r3, #1
 8001f58:	18d2      	adds	r2, r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	0019      	movs	r1, r3
 8001f60:	0010      	movs	r0, r2
 8001f62:	f7fe f8d1 	bl	8000108 <__udivsi3>
 8001f66:	0003      	movs	r3, r0
 8001f68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b0f      	cmp	r3, #15
 8001f6e:	d91c      	bls.n	8001faa <UART_SetConfig+0x1ee>
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	2380      	movs	r3, #128	@ 0x80
 8001f74:	025b      	lsls	r3, r3, #9
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d217      	bcs.n	8001faa <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	200e      	movs	r0, #14
 8001f80:	183b      	adds	r3, r7, r0
 8001f82:	210f      	movs	r1, #15
 8001f84:	438a      	bics	r2, r1
 8001f86:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	085b      	lsrs	r3, r3, #1
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2207      	movs	r2, #7
 8001f90:	4013      	ands	r3, r2
 8001f92:	b299      	uxth	r1, r3
 8001f94:	183b      	adds	r3, r7, r0
 8001f96:	183a      	adds	r2, r7, r0
 8001f98:	8812      	ldrh	r2, [r2, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	183a      	adds	r2, r7, r0
 8001fa4:	8812      	ldrh	r2, [r2, #0]
 8001fa6:	60da      	str	r2, [r3, #12]
 8001fa8:	e060      	b.n	800206c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001faa:	231e      	movs	r3, #30
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	e05b      	b.n	800206c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001fb4:	231f      	movs	r3, #31
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d01f      	beq.n	8001ffe <UART_SetConfig+0x242>
 8001fbe:	dc22      	bgt.n	8002006 <UART_SetConfig+0x24a>
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d017      	beq.n	8001ff4 <UART_SetConfig+0x238>
 8001fc4:	dc1f      	bgt.n	8002006 <UART_SetConfig+0x24a>
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <UART_SetConfig+0x214>
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d005      	beq.n	8001fda <UART_SetConfig+0x21e>
 8001fce:	e01a      	b.n	8002006 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fd0:	f7ff fd24 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	61bb      	str	r3, [r7, #24]
        break;
 8001fd8:	e01c      	b.n	8002014 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001fda:	4b33      	ldr	r3, [pc, #204]	@ (80020a8 <UART_SetConfig+0x2ec>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	4831      	ldr	r0, [pc, #196]	@ (80020b0 <UART_SetConfig+0x2f4>)
 8001fea:	f7fe f88d 	bl	8000108 <__udivsi3>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	61bb      	str	r3, [r7, #24]
        break;
 8001ff2:	e00f      	b.n	8002014 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ff4:	f7ff fc9c 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	61bb      	str	r3, [r7, #24]
        break;
 8001ffc:	e00a      	b.n	8002014 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ffe:	2380      	movs	r3, #128	@ 0x80
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	61bb      	str	r3, [r7, #24]
        break;
 8002004:	e006      	b.n	8002014 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800200a:	231e      	movs	r3, #30
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
        break;
 8002012:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d028      	beq.n	800206c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800201e:	4b25      	ldr	r3, [pc, #148]	@ (80020b4 <UART_SetConfig+0x2f8>)
 8002020:	0052      	lsls	r2, r2, #1
 8002022:	5ad3      	ldrh	r3, [r2, r3]
 8002024:	0019      	movs	r1, r3
 8002026:	69b8      	ldr	r0, [r7, #24]
 8002028:	f7fe f86e 	bl	8000108 <__udivsi3>
 800202c:	0003      	movs	r3, r0
 800202e:	001a      	movs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	085b      	lsrs	r3, r3, #1
 8002036:	18d2      	adds	r2, r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	0019      	movs	r1, r3
 800203e:	0010      	movs	r0, r2
 8002040:	f7fe f862 	bl	8000108 <__udivsi3>
 8002044:	0003      	movs	r3, r0
 8002046:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b0f      	cmp	r3, #15
 800204c:	d90a      	bls.n	8002064 <UART_SetConfig+0x2a8>
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	025b      	lsls	r3, r3, #9
 8002054:	429a      	cmp	r2, r3
 8002056:	d205      	bcs.n	8002064 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	b29a      	uxth	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	e003      	b.n	800206c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002064:	231e      	movs	r3, #30
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	226a      	movs	r2, #106	@ 0x6a
 8002070:	2101      	movs	r1, #1
 8002072:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2268      	movs	r2, #104	@ 0x68
 8002078:	2101      	movs	r1, #1
 800207a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002088:	231e      	movs	r3, #30
 800208a:	18fb      	adds	r3, r7, r3
 800208c:	781b      	ldrb	r3, [r3, #0]
}
 800208e:	0018      	movs	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	b008      	add	sp, #32
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	cfff69f3 	.word	0xcfff69f3
 800209c:	ffffcfff 	.word	0xffffcfff
 80020a0:	11fff4ff 	.word	0x11fff4ff
 80020a4:	40013800 	.word	0x40013800
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40004400 	.word	0x40004400
 80020b0:	02dc6c00 	.word	0x02dc6c00
 80020b4:	08003b5c 	.word	0x08003b5c

080020b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c4:	2208      	movs	r2, #8
 80020c6:	4013      	ands	r3, r2
 80020c8:	d00b      	beq.n	80020e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4a4a      	ldr	r2, [pc, #296]	@ (80021fc <UART_AdvFeatureConfig+0x144>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	0019      	movs	r1, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e6:	2201      	movs	r2, #1
 80020e8:	4013      	ands	r3, r2
 80020ea:	d00b      	beq.n	8002104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4a43      	ldr	r2, [pc, #268]	@ (8002200 <UART_AdvFeatureConfig+0x148>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	0019      	movs	r1, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002108:	2202      	movs	r2, #2
 800210a:	4013      	ands	r3, r2
 800210c:	d00b      	beq.n	8002126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a3b      	ldr	r2, [pc, #236]	@ (8002204 <UART_AdvFeatureConfig+0x14c>)
 8002116:	4013      	ands	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212a:	2204      	movs	r2, #4
 800212c:	4013      	ands	r3, r2
 800212e:	d00b      	beq.n	8002148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4a34      	ldr	r2, [pc, #208]	@ (8002208 <UART_AdvFeatureConfig+0x150>)
 8002138:	4013      	ands	r3, r2
 800213a:	0019      	movs	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	2210      	movs	r2, #16
 800214e:	4013      	ands	r3, r2
 8002150:	d00b      	beq.n	800216a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a2c      	ldr	r2, [pc, #176]	@ (800220c <UART_AdvFeatureConfig+0x154>)
 800215a:	4013      	ands	r3, r2
 800215c:	0019      	movs	r1, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216e:	2220      	movs	r2, #32
 8002170:	4013      	ands	r3, r2
 8002172:	d00b      	beq.n	800218c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	4a25      	ldr	r2, [pc, #148]	@ (8002210 <UART_AdvFeatureConfig+0x158>)
 800217c:	4013      	ands	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002190:	2240      	movs	r2, #64	@ 0x40
 8002192:	4013      	ands	r3, r2
 8002194:	d01d      	beq.n	80021d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4a1d      	ldr	r2, [pc, #116]	@ (8002214 <UART_AdvFeatureConfig+0x15c>)
 800219e:	4013      	ands	r3, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021b2:	2380      	movs	r3, #128	@ 0x80
 80021b4:	035b      	lsls	r3, r3, #13
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d10b      	bne.n	80021d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4a15      	ldr	r2, [pc, #84]	@ (8002218 <UART_AdvFeatureConfig+0x160>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	0019      	movs	r1, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d6:	2280      	movs	r2, #128	@ 0x80
 80021d8:	4013      	ands	r3, r2
 80021da:	d00b      	beq.n	80021f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4a0e      	ldr	r2, [pc, #56]	@ (800221c <UART_AdvFeatureConfig+0x164>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	605a      	str	r2, [r3, #4]
  }
}
 80021f4:	46c0      	nop			@ (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b002      	add	sp, #8
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	ffff7fff 	.word	0xffff7fff
 8002200:	fffdffff 	.word	0xfffdffff
 8002204:	fffeffff 	.word	0xfffeffff
 8002208:	fffbffff 	.word	0xfffbffff
 800220c:	ffffefff 	.word	0xffffefff
 8002210:	ffffdfff 	.word	0xffffdfff
 8002214:	ffefffff 	.word	0xffefffff
 8002218:	ff9fffff 	.word	0xff9fffff
 800221c:	fff7ffff 	.word	0xfff7ffff

08002220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b092      	sub	sp, #72	@ 0x48
 8002224:	af02      	add	r7, sp, #8
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2290      	movs	r2, #144	@ 0x90
 800222c:	2100      	movs	r1, #0
 800222e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002230:	f7fe fe10 	bl	8000e54 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2208      	movs	r2, #8
 8002240:	4013      	ands	r3, r2
 8002242:	2b08      	cmp	r3, #8
 8002244:	d12d      	bne.n	80022a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002248:	2280      	movs	r2, #128	@ 0x80
 800224a:	0391      	lsls	r1, r2, #14
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4a47      	ldr	r2, [pc, #284]	@ (800236c <UART_CheckIdleState+0x14c>)
 8002250:	9200      	str	r2, [sp, #0]
 8002252:	2200      	movs	r2, #0
 8002254:	f000 f88e 	bl	8002374 <UART_WaitOnFlagUntilTimeout>
 8002258:	1e03      	subs	r3, r0, #0
 800225a:	d022      	beq.n	80022a2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800225c:	f3ef 8310 	mrs	r3, PRIMASK
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002264:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002266:	2301      	movs	r3, #1
 8002268:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800226a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226c:	f383 8810 	msr	PRIMASK, r3
}
 8002270:	46c0      	nop			@ (mov r8, r8)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2180      	movs	r1, #128	@ 0x80
 800227e:	438a      	bics	r2, r1
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002288:	f383 8810 	msr	PRIMASK, r3
}
 800228c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2288      	movs	r2, #136	@ 0x88
 8002292:	2120      	movs	r1, #32
 8002294:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2284      	movs	r2, #132	@ 0x84
 800229a:	2100      	movs	r1, #0
 800229c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e060      	b.n	8002364 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2204      	movs	r2, #4
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d146      	bne.n	800233e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b2:	2280      	movs	r2, #128	@ 0x80
 80022b4:	03d1      	lsls	r1, r2, #15
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	4a2c      	ldr	r2, [pc, #176]	@ (800236c <UART_CheckIdleState+0x14c>)
 80022ba:	9200      	str	r2, [sp, #0]
 80022bc:	2200      	movs	r2, #0
 80022be:	f000 f859 	bl	8002374 <UART_WaitOnFlagUntilTimeout>
 80022c2:	1e03      	subs	r3, r0, #0
 80022c4:	d03b      	beq.n	800233e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80022c6:	f3ef 8310 	mrs	r3, PRIMASK
 80022ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80022cc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80022ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80022d0:	2301      	movs	r3, #1
 80022d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f383 8810 	msr	PRIMASK, r3
}
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4922      	ldr	r1, [pc, #136]	@ (8002370 <UART_CheckIdleState+0x150>)
 80022e8:	400a      	ands	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f383 8810 	msr	PRIMASK, r3
}
 80022f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80022f8:	f3ef 8310 	mrs	r3, PRIMASK
 80022fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80022fe:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002300:	633b      	str	r3, [r7, #48]	@ 0x30
 8002302:	2301      	movs	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f383 8810 	msr	PRIMASK, r3
}
 800230c:	46c0      	nop			@ (mov r8, r8)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2101      	movs	r1, #1
 800231a:	438a      	bics	r2, r1
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002320:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	f383 8810 	msr	PRIMASK, r3
}
 8002328:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	228c      	movs	r2, #140	@ 0x8c
 800232e:	2120      	movs	r1, #32
 8002330:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2284      	movs	r2, #132	@ 0x84
 8002336:	2100      	movs	r1, #0
 8002338:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e012      	b.n	8002364 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2288      	movs	r2, #136	@ 0x88
 8002342:	2120      	movs	r1, #32
 8002344:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	228c      	movs	r2, #140	@ 0x8c
 800234a:	2120      	movs	r1, #32
 800234c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2284      	movs	r2, #132	@ 0x84
 800235e:	2100      	movs	r1, #0
 8002360:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	0018      	movs	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	b010      	add	sp, #64	@ 0x40
 800236a:	bd80      	pop	{r7, pc}
 800236c:	01ffffff 	.word	0x01ffffff
 8002370:	fffffedf 	.word	0xfffffedf

08002374 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	1dfb      	adds	r3, r7, #7
 8002382:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002384:	e051      	b.n	800242a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	3301      	adds	r3, #1
 800238a:	d04e      	beq.n	800242a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800238c:	f7fe fd62 	bl	8000e54 <HAL_GetTick>
 8002390:	0002      	movs	r2, r0
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	429a      	cmp	r2, r3
 800239a:	d302      	bcc.n	80023a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e051      	b.n	800244a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2204      	movs	r2, #4
 80023ae:	4013      	ands	r3, r2
 80023b0:	d03b      	beq.n	800242a <UART_WaitOnFlagUntilTimeout+0xb6>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b80      	cmp	r3, #128	@ 0x80
 80023b6:	d038      	beq.n	800242a <UART_WaitOnFlagUntilTimeout+0xb6>
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b40      	cmp	r3, #64	@ 0x40
 80023bc:	d035      	beq.n	800242a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	2208      	movs	r2, #8
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d111      	bne.n	80023f0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2208      	movs	r2, #8
 80023d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 f960 	bl	800269c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2290      	movs	r2, #144	@ 0x90
 80023e0:	2108      	movs	r1, #8
 80023e2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2284      	movs	r2, #132	@ 0x84
 80023e8:	2100      	movs	r1, #0
 80023ea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e02c      	b.n	800244a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	2380      	movs	r3, #128	@ 0x80
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	401a      	ands	r2, r3
 80023fc:	2380      	movs	r3, #128	@ 0x80
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	429a      	cmp	r2, r3
 8002402:	d112      	bne.n	800242a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2280      	movs	r2, #128	@ 0x80
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	0018      	movs	r0, r3
 8002412:	f000 f943 	bl	800269c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2290      	movs	r2, #144	@ 0x90
 800241a:	2120      	movs	r1, #32
 800241c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2284      	movs	r2, #132	@ 0x84
 8002422:	2100      	movs	r1, #0
 8002424:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e00f      	b.n	800244a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	4013      	ands	r3, r2
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	425a      	negs	r2, r3
 800243a:	4153      	adcs	r3, r2
 800243c:	b2db      	uxtb	r3, r3
 800243e:	001a      	movs	r2, r3
 8002440:	1dfb      	adds	r3, r7, #7
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d09e      	beq.n	8002386 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b004      	add	sp, #16
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b098      	sub	sp, #96	@ 0x60
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	1dbb      	adds	r3, r7, #6
 8002460:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1dba      	adds	r2, r7, #6
 800246c:	215c      	movs	r1, #92	@ 0x5c
 800246e:	8812      	ldrh	r2, [r2, #0]
 8002470:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1dba      	adds	r2, r7, #6
 8002476:	215e      	movs	r1, #94	@ 0x5e
 8002478:	8812      	ldrh	r2, [r2, #0]
 800247a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	2380      	movs	r3, #128	@ 0x80
 8002488:	015b      	lsls	r3, r3, #5
 800248a:	429a      	cmp	r2, r3
 800248c:	d10d      	bne.n	80024aa <UART_Start_Receive_IT+0x56>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d104      	bne.n	80024a0 <UART_Start_Receive_IT+0x4c>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2260      	movs	r2, #96	@ 0x60
 800249a:	497b      	ldr	r1, [pc, #492]	@ (8002688 <UART_Start_Receive_IT+0x234>)
 800249c:	5299      	strh	r1, [r3, r2]
 800249e:	e02e      	b.n	80024fe <UART_Start_Receive_IT+0xaa>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2260      	movs	r2, #96	@ 0x60
 80024a4:	21ff      	movs	r1, #255	@ 0xff
 80024a6:	5299      	strh	r1, [r3, r2]
 80024a8:	e029      	b.n	80024fe <UART_Start_Receive_IT+0xaa>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10d      	bne.n	80024ce <UART_Start_Receive_IT+0x7a>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d104      	bne.n	80024c4 <UART_Start_Receive_IT+0x70>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2260      	movs	r2, #96	@ 0x60
 80024be:	21ff      	movs	r1, #255	@ 0xff
 80024c0:	5299      	strh	r1, [r3, r2]
 80024c2:	e01c      	b.n	80024fe <UART_Start_Receive_IT+0xaa>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2260      	movs	r2, #96	@ 0x60
 80024c8:	217f      	movs	r1, #127	@ 0x7f
 80024ca:	5299      	strh	r1, [r3, r2]
 80024cc:	e017      	b.n	80024fe <UART_Start_Receive_IT+0xaa>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	2380      	movs	r3, #128	@ 0x80
 80024d4:	055b      	lsls	r3, r3, #21
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d10d      	bne.n	80024f6 <UART_Start_Receive_IT+0xa2>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d104      	bne.n	80024ec <UART_Start_Receive_IT+0x98>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2260      	movs	r2, #96	@ 0x60
 80024e6:	217f      	movs	r1, #127	@ 0x7f
 80024e8:	5299      	strh	r1, [r3, r2]
 80024ea:	e008      	b.n	80024fe <UART_Start_Receive_IT+0xaa>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2260      	movs	r2, #96	@ 0x60
 80024f0:	213f      	movs	r1, #63	@ 0x3f
 80024f2:	5299      	strh	r1, [r3, r2]
 80024f4:	e003      	b.n	80024fe <UART_Start_Receive_IT+0xaa>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2260      	movs	r2, #96	@ 0x60
 80024fa:	2100      	movs	r1, #0
 80024fc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2290      	movs	r2, #144	@ 0x90
 8002502:	2100      	movs	r1, #0
 8002504:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	228c      	movs	r2, #140	@ 0x8c
 800250a:	2122      	movs	r1, #34	@ 0x22
 800250c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800250e:	f3ef 8310 	mrs	r3, PRIMASK
 8002512:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8002514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002516:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002518:	2301      	movs	r3, #1
 800251a:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800251c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800251e:	f383 8810 	msr	PRIMASK, r3
}
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2101      	movs	r1, #1
 8002530:	430a      	orrs	r2, r1
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002536:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002538:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800253a:	f383 8810 	msr	PRIMASK, r3
}
 800253e:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	059b      	lsls	r3, r3, #22
 8002548:	429a      	cmp	r2, r3
 800254a:	d150      	bne.n	80025ee <UART_Start_Receive_IT+0x19a>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2268      	movs	r2, #104	@ 0x68
 8002550:	5a9b      	ldrh	r3, [r3, r2]
 8002552:	1dba      	adds	r2, r7, #6
 8002554:	8812      	ldrh	r2, [r2, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d349      	bcc.n	80025ee <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	2380      	movs	r3, #128	@ 0x80
 8002560:	015b      	lsls	r3, r3, #5
 8002562:	429a      	cmp	r2, r3
 8002564:	d107      	bne.n	8002576 <UART_Start_Receive_IT+0x122>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d103      	bne.n	8002576 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4a46      	ldr	r2, [pc, #280]	@ (800268c <UART_Start_Receive_IT+0x238>)
 8002572:	675a      	str	r2, [r3, #116]	@ 0x74
 8002574:	e002      	b.n	800257c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4a45      	ldr	r2, [pc, #276]	@ (8002690 <UART_Start_Receive_IT+0x23c>)
 800257a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d019      	beq.n	80025b8 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002584:	f3ef 8310 	mrs	r3, PRIMASK
 8002588:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800258a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800258c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800258e:	2301      	movs	r3, #1
 8002590:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002594:	f383 8810 	msr	PRIMASK, r3
}
 8002598:	46c0      	nop			@ (mov r8, r8)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2180      	movs	r1, #128	@ 0x80
 80025a6:	0049      	lsls	r1, r1, #1
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025b2:	f383 8810 	msr	PRIMASK, r3
}
 80025b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80025b8:	f3ef 8310 	mrs	r3, PRIMASK
 80025bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80025be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80025c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80025c2:	2301      	movs	r3, #1
 80025c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c8:	f383 8810 	msr	PRIMASK, r3
}
 80025cc:	46c0      	nop			@ (mov r8, r8)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2180      	movs	r1, #128	@ 0x80
 80025da:	0549      	lsls	r1, r1, #21
 80025dc:	430a      	orrs	r2, r1
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e6:	f383 8810 	msr	PRIMASK, r3
}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	e047      	b.n	800267e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	2380      	movs	r3, #128	@ 0x80
 80025f4:	015b      	lsls	r3, r3, #5
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d107      	bne.n	800260a <UART_Start_Receive_IT+0x1b6>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4a23      	ldr	r2, [pc, #140]	@ (8002694 <UART_Start_Receive_IT+0x240>)
 8002606:	675a      	str	r2, [r3, #116]	@ 0x74
 8002608:	e002      	b.n	8002610 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4a22      	ldr	r2, [pc, #136]	@ (8002698 <UART_Start_Receive_IT+0x244>)
 800260e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d019      	beq.n	800264c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002618:	f3ef 8310 	mrs	r3, PRIMASK
 800261c:	61fb      	str	r3, [r7, #28]
  return(result);
 800261e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002620:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002622:	2301      	movs	r3, #1
 8002624:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	f383 8810 	msr	PRIMASK, r3
}
 800262c:	46c0      	nop			@ (mov r8, r8)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2190      	movs	r1, #144	@ 0x90
 800263a:	0049      	lsls	r1, r1, #1
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	f383 8810 	msr	PRIMASK, r3
}
 800264a:	e018      	b.n	800267e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800264c:	f3ef 8310 	mrs	r3, PRIMASK
 8002650:	613b      	str	r3, [r7, #16]
  return(result);
 8002652:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002654:	653b      	str	r3, [r7, #80]	@ 0x50
 8002656:	2301      	movs	r3, #1
 8002658:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f383 8810 	msr	PRIMASK, r3
}
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2120      	movs	r1, #32
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002674:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f383 8810 	msr	PRIMASK, r3
}
 800267c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	b018      	add	sp, #96	@ 0x60
 8002686:	bd80      	pop	{r7, pc}
 8002688:	000001ff 	.word	0x000001ff
 800268c:	08003161 	.word	0x08003161
 8002690:	08002e2d 	.word	0x08002e2d
 8002694:	08002c75 	.word	0x08002c75
 8002698:	08002abd 	.word	0x08002abd

0800269c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08e      	sub	sp, #56	@ 0x38
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026a4:	f3ef 8310 	mrs	r3, PRIMASK
 80026a8:	617b      	str	r3, [r7, #20]
  return(result);
 80026aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80026ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80026ae:	2301      	movs	r3, #1
 80026b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f383 8810 	msr	PRIMASK, r3
}
 80026b8:	46c0      	nop			@ (mov r8, r8)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4926      	ldr	r1, [pc, #152]	@ (8002760 <UART_EndRxTransfer+0xc4>)
 80026c6:	400a      	ands	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f383 8810 	msr	PRIMASK, r3
}
 80026d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026d6:	f3ef 8310 	mrs	r3, PRIMASK
 80026da:	623b      	str	r3, [r7, #32]
  return(result);
 80026dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80026de:	633b      	str	r3, [r7, #48]	@ 0x30
 80026e0:	2301      	movs	r3, #1
 80026e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	f383 8810 	msr	PRIMASK, r3
}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	491b      	ldr	r1, [pc, #108]	@ (8002764 <UART_EndRxTransfer+0xc8>)
 80026f8:	400a      	ands	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002702:	f383 8810 	msr	PRIMASK, r3
}
 8002706:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800270c:	2b01      	cmp	r3, #1
 800270e:	d118      	bne.n	8002742 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002710:	f3ef 8310 	mrs	r3, PRIMASK
 8002714:	60bb      	str	r3, [r7, #8]
  return(result);
 8002716:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800271a:	2301      	movs	r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f383 8810 	msr	PRIMASK, r3
}
 8002724:	46c0      	nop			@ (mov r8, r8)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2110      	movs	r1, #16
 8002732:	438a      	bics	r2, r1
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002738:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f383 8810 	msr	PRIMASK, r3
}
 8002740:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	228c      	movs	r2, #140	@ 0x8c
 8002746:	2120      	movs	r1, #32
 8002748:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	46bd      	mov	sp, r7
 800275a:	b00e      	add	sp, #56	@ 0x38
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			@ (mov r8, r8)
 8002760:	fffffedf 	.word	0xfffffedf
 8002764:	effffffe 	.word	0xeffffffe

08002768 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	@ 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2288      	movs	r2, #136	@ 0x88
 8002774:	589b      	ldr	r3, [r3, r2]
 8002776:	2b21      	cmp	r3, #33	@ 0x21
 8002778:	d14c      	bne.n	8002814 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2256      	movs	r2, #86	@ 0x56
 800277e:	5a9b      	ldrh	r3, [r3, r2]
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d132      	bne.n	80027ec <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002786:	f3ef 8310 	mrs	r3, PRIMASK
 800278a:	60bb      	str	r3, [r7, #8]
  return(result);
 800278c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002790:	2301      	movs	r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f383 8810 	msr	PRIMASK, r3
}
 800279a:	46c0      	nop			@ (mov r8, r8)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2180      	movs	r1, #128	@ 0x80
 80027a8:	438a      	bics	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f383 8810 	msr	PRIMASK, r3
}
 80027b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80027b8:	f3ef 8310 	mrs	r3, PRIMASK
 80027bc:	617b      	str	r3, [r7, #20]
  return(result);
 80027be:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027c0:	623b      	str	r3, [r7, #32]
 80027c2:	2301      	movs	r3, #1
 80027c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	f383 8810 	msr	PRIMASK, r3
}
 80027cc:	46c0      	nop			@ (mov r8, r8)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2140      	movs	r1, #64	@ 0x40
 80027da:	430a      	orrs	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f383 8810 	msr	PRIMASK, r3
}
 80027e8:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80027ea:	e013      	b.n	8002814 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2256      	movs	r2, #86	@ 0x56
 8002806:	5a9b      	ldrh	r3, [r3, r2]
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b299      	uxth	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2256      	movs	r2, #86	@ 0x56
 8002812:	5299      	strh	r1, [r3, r2]
}
 8002814:	46c0      	nop			@ (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	b00a      	add	sp, #40	@ 0x28
 800281a:	bd80      	pop	{r7, pc}

0800281c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08c      	sub	sp, #48	@ 0x30
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2288      	movs	r2, #136	@ 0x88
 8002828:	589b      	ldr	r3, [r3, r2]
 800282a:	2b21      	cmp	r3, #33	@ 0x21
 800282c:	d151      	bne.n	80028d2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2256      	movs	r2, #86	@ 0x56
 8002832:	5a9b      	ldrh	r3, [r3, r2]
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d132      	bne.n	80028a0 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800283a:	f3ef 8310 	mrs	r3, PRIMASK
 800283e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002840:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002842:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002844:	2301      	movs	r3, #1
 8002846:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f383 8810 	msr	PRIMASK, r3
}
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2180      	movs	r1, #128	@ 0x80
 800285c:	438a      	bics	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002862:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f383 8810 	msr	PRIMASK, r3
}
 800286a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800286c:	f3ef 8310 	mrs	r3, PRIMASK
 8002870:	61bb      	str	r3, [r7, #24]
  return(result);
 8002872:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24
 8002876:	2301      	movs	r3, #1
 8002878:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f383 8810 	msr	PRIMASK, r3
}
 8002880:	46c0      	nop			@ (mov r8, r8)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2140      	movs	r1, #64	@ 0x40
 800288e:	430a      	orrs	r2, r1
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	f383 8810 	msr	PRIMASK, r3
}
 800289c:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800289e:	e018      	b.n	80028d2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80028a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	001a      	movs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	05d2      	lsls	r2, r2, #23
 80028b2:	0dd2      	lsrs	r2, r2, #23
 80028b4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ba:	1c9a      	adds	r2, r3, #2
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2256      	movs	r2, #86	@ 0x56
 80028c4:	5a9b      	ldrh	r3, [r3, r2]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b299      	uxth	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2256      	movs	r2, #86	@ 0x56
 80028d0:	5299      	strh	r1, [r3, r2]
}
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b00c      	add	sp, #48	@ 0x30
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08c      	sub	sp, #48	@ 0x30
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2288      	movs	r2, #136	@ 0x88
 80028e8:	589b      	ldr	r3, [r3, r2]
 80028ea:	2b21      	cmp	r3, #33	@ 0x21
 80028ec:	d165      	bne.n	80029ba <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80028ee:	232e      	movs	r3, #46	@ 0x2e
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	216a      	movs	r1, #106	@ 0x6a
 80028f6:	5a52      	ldrh	r2, [r2, r1]
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	e059      	b.n	80029b0 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2256      	movs	r2, #86	@ 0x56
 8002900:	5a9b      	ldrh	r3, [r3, r2]
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d133      	bne.n	8002970 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002908:	f3ef 8310 	mrs	r3, PRIMASK
 800290c:	60fb      	str	r3, [r7, #12]
  return(result);
 800290e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002912:	2301      	movs	r3, #1
 8002914:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f383 8810 	msr	PRIMASK, r3
}
 800291c:	46c0      	nop			@ (mov r8, r8)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4926      	ldr	r1, [pc, #152]	@ (80029c4 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800292a:	400a      	ands	r2, r1
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002930:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f383 8810 	msr	PRIMASK, r3
}
 8002938:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800293a:	f3ef 8310 	mrs	r3, PRIMASK
 800293e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002940:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
 8002944:	2301      	movs	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f383 8810 	msr	PRIMASK, r3
}
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2140      	movs	r1, #64	@ 0x40
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	f383 8810 	msr	PRIMASK, r3
}
 800296a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800296c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800296e:	e024      	b.n	80029ba <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2280      	movs	r2, #128	@ 0x80
 8002978:	4013      	ands	r3, r2
 800297a:	d013      	beq.n	80029a4 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002980:	781a      	ldrb	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2256      	movs	r2, #86	@ 0x56
 8002996:	5a9b      	ldrh	r3, [r3, r2]
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b299      	uxth	r1, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2256      	movs	r2, #86	@ 0x56
 80029a2:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80029a4:	212e      	movs	r1, #46	@ 0x2e
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	881a      	ldrh	r2, [r3, #0]
 80029aa:	187b      	adds	r3, r7, r1
 80029ac:	3a01      	subs	r2, #1
 80029ae:	801a      	strh	r2, [r3, #0]
 80029b0:	232e      	movs	r3, #46	@ 0x2e
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1a0      	bne.n	80028fc <UART_TxISR_8BIT_FIFOEN+0x20>
}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b00c      	add	sp, #48	@ 0x30
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	ff7fffff 	.word	0xff7fffff

080029c8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08c      	sub	sp, #48	@ 0x30
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2288      	movs	r2, #136	@ 0x88
 80029d4:	589b      	ldr	r3, [r3, r2]
 80029d6:	2b21      	cmp	r3, #33	@ 0x21
 80029d8:	d16a      	bne.n	8002ab0 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80029da:	232e      	movs	r3, #46	@ 0x2e
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	216a      	movs	r1, #106	@ 0x6a
 80029e2:	5a52      	ldrh	r2, [r2, r1]
 80029e4:	801a      	strh	r2, [r3, #0]
 80029e6:	e05e      	b.n	8002aa6 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2256      	movs	r2, #86	@ 0x56
 80029ec:	5a9b      	ldrh	r3, [r3, r2]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d133      	bne.n	8002a5c <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029f4:	f3ef 8310 	mrs	r3, PRIMASK
 80029f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80029fa:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029fe:	2301      	movs	r3, #1
 8002a00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f383 8810 	msr	PRIMASK, r3
}
 8002a08:	46c0      	nop			@ (mov r8, r8)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4928      	ldr	r1, [pc, #160]	@ (8002ab8 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8002a16:	400a      	ands	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f383 8810 	msr	PRIMASK, r3
}
 8002a24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a26:	f3ef 8310 	mrs	r3, PRIMASK
 8002a2a:	617b      	str	r3, [r7, #20]
  return(result);
 8002a2c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a2e:	623b      	str	r3, [r7, #32]
 8002a30:	2301      	movs	r3, #1
 8002a32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	f383 8810 	msr	PRIMASK, r3
}
 8002a3a:	46c0      	nop			@ (mov r8, r8)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2140      	movs	r1, #64	@ 0x40
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f383 8810 	msr	PRIMASK, r3
}
 8002a56:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8002a58:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8002a5a:	e029      	b.n	8002ab0 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	2280      	movs	r2, #128	@ 0x80
 8002a64:	4013      	ands	r3, r2
 8002a66:	d018      	beq.n	8002a9a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	001a      	movs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	05d2      	lsls	r2, r2, #23
 8002a7a:	0dd2      	lsrs	r2, r2, #23
 8002a7c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a82:	1c9a      	adds	r2, r3, #2
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2256      	movs	r2, #86	@ 0x56
 8002a8c:	5a9b      	ldrh	r3, [r3, r2]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b299      	uxth	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2256      	movs	r2, #86	@ 0x56
 8002a98:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002a9a:	212e      	movs	r1, #46	@ 0x2e
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	881a      	ldrh	r2, [r3, #0]
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	3a01      	subs	r2, #1
 8002aa4:	801a      	strh	r2, [r3, #0]
 8002aa6:	232e      	movs	r3, #46	@ 0x2e
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d19b      	bne.n	80029e8 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8002ab0:	46c0      	nop			@ (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b00c      	add	sp, #48	@ 0x30
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	ff7fffff 	.word	0xff7fffff

08002abc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b094      	sub	sp, #80	@ 0x50
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002ac4:	204e      	movs	r0, #78	@ 0x4e
 8002ac6:	183b      	adds	r3, r7, r0
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	2160      	movs	r1, #96	@ 0x60
 8002acc:	5a52      	ldrh	r2, [r2, r1]
 8002ace:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	228c      	movs	r2, #140	@ 0x8c
 8002ad4:	589b      	ldr	r3, [r3, r2]
 8002ad6:	2b22      	cmp	r3, #34	@ 0x22
 8002ad8:	d000      	beq.n	8002adc <UART_RxISR_8BIT+0x20>
 8002ada:	e0ba      	b.n	8002c52 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ae2:	214c      	movs	r1, #76	@ 0x4c
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	183b      	adds	r3, r7, r0
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	b2d9      	uxtb	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af8:	400a      	ands	r2, r1
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	225e      	movs	r2, #94	@ 0x5e
 8002b0c:	5a9b      	ldrh	r3, [r3, r2]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b299      	uxth	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	225e      	movs	r2, #94	@ 0x5e
 8002b18:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	225e      	movs	r2, #94	@ 0x5e
 8002b1e:	5a9b      	ldrh	r3, [r3, r2]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d000      	beq.n	8002b28 <UART_RxISR_8BIT+0x6c>
 8002b26:	e09c      	b.n	8002c62 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b28:	f3ef 8310 	mrs	r3, PRIMASK
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b32:	2301      	movs	r3, #1
 8002b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b38:	f383 8810 	msr	PRIMASK, r3
}
 8002b3c:	46c0      	nop			@ (mov r8, r8)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4948      	ldr	r1, [pc, #288]	@ (8002c6c <UART_RxISR_8BIT+0x1b0>)
 8002b4a:	400a      	ands	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b54:	f383 8810 	msr	PRIMASK, r3
}
 8002b58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b62:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b64:	2301      	movs	r3, #1
 8002b66:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b6a:	f383 8810 	msr	PRIMASK, r3
}
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	438a      	bics	r2, r1
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b82:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b86:	f383 8810 	msr	PRIMASK, r3
}
 8002b8a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	228c      	movs	r2, #140	@ 0x8c
 8002b90:	2120      	movs	r1, #32
 8002b92:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	2380      	movs	r3, #128	@ 0x80
 8002ba8:	041b      	lsls	r3, r3, #16
 8002baa:	4013      	ands	r3, r2
 8002bac:	d018      	beq.n	8002be0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002bae:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002bb4:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002bb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bb8:	2301      	movs	r3, #1
 8002bba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f383 8810 	msr	PRIMASK, r3
}
 8002bc2:	46c0      	nop			@ (mov r8, r8)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4928      	ldr	r1, [pc, #160]	@ (8002c70 <UART_RxISR_8BIT+0x1b4>)
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bd6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	f383 8810 	msr	PRIMASK, r3
}
 8002bde:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d12f      	bne.n	8002c48 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002bee:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf2:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bf4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f383 8810 	msr	PRIMASK, r3
}
 8002c02:	46c0      	nop			@ (mov r8, r8)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2110      	movs	r1, #16
 8002c10:	438a      	bics	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f383 8810 	msr	PRIMASK, r3
}
 8002c1e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	2210      	movs	r2, #16
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d103      	bne.n	8002c36 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2210      	movs	r2, #16
 8002c34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	225c      	movs	r2, #92	@ 0x5c
 8002c3a:	5a9a      	ldrh	r2, [r3, r2]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	0011      	movs	r1, r2
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7ff f8af 	bl	8001da4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002c46:	e00c      	b.n	8002c62 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f7fd fcf4 	bl	8000638 <HAL_UART_RxCpltCallback>
}
 8002c50:	e007      	b.n	8002c62 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2108      	movs	r1, #8
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	619a      	str	r2, [r3, #24]
}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b014      	add	sp, #80	@ 0x50
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	fffffedf 	.word	0xfffffedf
 8002c70:	fbffffff 	.word	0xfbffffff

08002c74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b094      	sub	sp, #80	@ 0x50
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002c7c:	204e      	movs	r0, #78	@ 0x4e
 8002c7e:	183b      	adds	r3, r7, r0
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	2160      	movs	r1, #96	@ 0x60
 8002c84:	5a52      	ldrh	r2, [r2, r1]
 8002c86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	228c      	movs	r2, #140	@ 0x8c
 8002c8c:	589b      	ldr	r3, [r3, r2]
 8002c8e:	2b22      	cmp	r3, #34	@ 0x22
 8002c90:	d000      	beq.n	8002c94 <UART_RxISR_16BIT+0x20>
 8002c92:	e0ba      	b.n	8002e0a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c9a:	214c      	movs	r1, #76	@ 0x4c
 8002c9c:	187b      	adds	r3, r7, r1
 8002c9e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8002ca6:	187b      	adds	r3, r7, r1
 8002ca8:	183a      	adds	r2, r7, r0
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	8812      	ldrh	r2, [r2, #0]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cb4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cba:	1c9a      	adds	r2, r3, #2
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	225e      	movs	r2, #94	@ 0x5e
 8002cc4:	5a9b      	ldrh	r3, [r3, r2]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b299      	uxth	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	225e      	movs	r2, #94	@ 0x5e
 8002cd0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	225e      	movs	r2, #94	@ 0x5e
 8002cd6:	5a9b      	ldrh	r3, [r3, r2]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d000      	beq.n	8002ce0 <UART_RxISR_16BIT+0x6c>
 8002cde:	e09c      	b.n	8002e1a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ce4:	623b      	str	r3, [r7, #32]
  return(result);
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ce8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cea:	2301      	movs	r3, #1
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf0:	f383 8810 	msr	PRIMASK, r3
}
 8002cf4:	46c0      	nop			@ (mov r8, r8)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4948      	ldr	r1, [pc, #288]	@ (8002e24 <UART_RxISR_16BIT+0x1b0>)
 8002d02:	400a      	ands	r2, r1
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0c:	f383 8810 	msr	PRIMASK, r3
}
 8002d10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d12:	f3ef 8310 	mrs	r3, PRIMASK
 8002d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8002d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d22:	f383 8810 	msr	PRIMASK, r3
}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2101      	movs	r1, #1
 8002d34:	438a      	bics	r2, r1
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d3a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d3e:	f383 8810 	msr	PRIMASK, r3
}
 8002d42:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	228c      	movs	r2, #140	@ 0x8c
 8002d48:	2120      	movs	r1, #32
 8002d4a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	2380      	movs	r3, #128	@ 0x80
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	4013      	ands	r3, r2
 8002d64:	d018      	beq.n	8002d98 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d66:	f3ef 8310 	mrs	r3, PRIMASK
 8002d6a:	617b      	str	r3, [r7, #20]
  return(result);
 8002d6c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d70:	2301      	movs	r3, #1
 8002d72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	f383 8810 	msr	PRIMASK, r3
}
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4928      	ldr	r1, [pc, #160]	@ (8002e28 <UART_RxISR_16BIT+0x1b4>)
 8002d88:	400a      	ands	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f383 8810 	msr	PRIMASK, r3
}
 8002d96:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d12f      	bne.n	8002e00 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002da6:	f3ef 8310 	mrs	r3, PRIMASK
 8002daa:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dac:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002db0:	2301      	movs	r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f383 8810 	msr	PRIMASK, r3
}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2110      	movs	r1, #16
 8002dc8:	438a      	bics	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f383 8810 	msr	PRIMASK, r3
}
 8002dd6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	2210      	movs	r2, #16
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b10      	cmp	r3, #16
 8002de4:	d103      	bne.n	8002dee <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2210      	movs	r2, #16
 8002dec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	225c      	movs	r2, #92	@ 0x5c
 8002df2:	5a9a      	ldrh	r2, [r3, r2]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	0011      	movs	r1, r2
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7fe ffd3 	bl	8001da4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002dfe:	e00c      	b.n	8002e1a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7fd fc18 	bl	8000638 <HAL_UART_RxCpltCallback>
}
 8002e08:	e007      	b.n	8002e1a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699a      	ldr	r2, [r3, #24]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2108      	movs	r1, #8
 8002e16:	430a      	orrs	r2, r1
 8002e18:	619a      	str	r2, [r3, #24]
}
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b014      	add	sp, #80	@ 0x50
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			@ (mov r8, r8)
 8002e24:	fffffedf 	.word	0xfffffedf
 8002e28:	fbffffff 	.word	0xfbffffff

08002e2c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b0a0      	sub	sp, #128	@ 0x80
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8002e34:	237a      	movs	r3, #122	@ 0x7a
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	2160      	movs	r1, #96	@ 0x60
 8002e3c:	5a52      	ldrh	r2, [r2, r1]
 8002e3e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	228c      	movs	r2, #140	@ 0x8c
 8002e5c:	589b      	ldr	r3, [r3, r2]
 8002e5e:	2b22      	cmp	r3, #34	@ 0x22
 8002e60:	d000      	beq.n	8002e64 <UART_RxISR_8BIT_FIFOEN+0x38>
 8002e62:	e166      	b.n	8003132 <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002e64:	236e      	movs	r3, #110	@ 0x6e
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	2168      	movs	r1, #104	@ 0x68
 8002e6c:	5a52      	ldrh	r2, [r2, r1]
 8002e6e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002e70:	e10d      	b.n	800308e <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e78:	216c      	movs	r1, #108	@ 0x6c
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	237a      	movs	r3, #122	@ 0x7a
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b2d9      	uxtb	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e90:	400a      	ands	r2, r1
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	225e      	movs	r2, #94	@ 0x5e
 8002ea4:	5a9b      	ldrh	r3, [r3, r2]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b299      	uxth	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	225e      	movs	r2, #94	@ 0x5e
 8002eb0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002eba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d049      	beq.n	8002f56 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ec2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d010      	beq.n	8002eec <UART_RxISR_8BIT_FIFOEN+0xc0>
 8002eca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ecc:	2380      	movs	r3, #128	@ 0x80
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d00b      	beq.n	8002eec <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2290      	movs	r2, #144	@ 0x90
 8002ee0:	589b      	ldr	r3, [r3, r2]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2190      	movs	r1, #144	@ 0x90
 8002eea:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002eec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002eee:	2202      	movs	r2, #2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d00f      	beq.n	8002f14 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8002ef4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d00b      	beq.n	8002f14 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2202      	movs	r2, #2
 8002f02:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2290      	movs	r2, #144	@ 0x90
 8002f08:	589b      	ldr	r3, [r3, r2]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2190      	movs	r1, #144	@ 0x90
 8002f12:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f16:	2204      	movs	r2, #4
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d00f      	beq.n	8002f3c <UART_RxISR_8BIT_FIFOEN+0x110>
 8002f1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4013      	ands	r3, r2
 8002f22:	d00b      	beq.n	8002f3c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2204      	movs	r2, #4
 8002f2a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2290      	movs	r2, #144	@ 0x90
 8002f30:	589b      	ldr	r3, [r3, r2]
 8002f32:	2202      	movs	r2, #2
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2190      	movs	r1, #144	@ 0x90
 8002f3a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2290      	movs	r2, #144	@ 0x90
 8002f40:	589b      	ldr	r3, [r3, r2]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d007      	beq.n	8002f56 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7fe ff23 	bl	8001d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2290      	movs	r2, #144	@ 0x90
 8002f52:	2100      	movs	r1, #0
 8002f54:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	225e      	movs	r2, #94	@ 0x5e
 8002f5a:	5a9b      	ldrh	r3, [r3, r2]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d000      	beq.n	8002f64 <UART_RxISR_8BIT_FIFOEN+0x138>
 8002f62:	e094      	b.n	800308e <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f64:	f3ef 8310 	mrs	r3, PRIMASK
 8002f68:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f6e:	2301      	movs	r3, #1
 8002f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f74:	f383 8810 	msr	PRIMASK, r3
}
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4971      	ldr	r1, [pc, #452]	@ (800314c <UART_RxISR_8BIT_FIFOEN+0x320>)
 8002f86:	400a      	ands	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f8c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f90:	f383 8810 	msr	PRIMASK, r3
}
 8002f94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f96:	f3ef 8310 	mrs	r3, PRIMASK
 8002f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8002f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fa6:	f383 8810 	msr	PRIMASK, r3
}
 8002faa:	46c0      	nop			@ (mov r8, r8)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4966      	ldr	r1, [pc, #408]	@ (8003150 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8002fb8:	400a      	ands	r2, r1
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fc2:	f383 8810 	msr	PRIMASK, r3
}
 8002fc6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	228c      	movs	r2, #140	@ 0x8c
 8002fcc:	2120      	movs	r1, #32
 8002fce:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	2380      	movs	r3, #128	@ 0x80
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d018      	beq.n	800301c <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fea:	f3ef 8310 	mrs	r3, PRIMASK
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8002ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ff2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffa:	f383 8810 	msr	PRIMASK, r3
}
 8002ffe:	46c0      	nop			@ (mov r8, r8)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4952      	ldr	r1, [pc, #328]	@ (8003154 <UART_RxISR_8BIT_FIFOEN+0x328>)
 800300c:	400a      	ands	r2, r1
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003012:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003016:	f383 8810 	msr	PRIMASK, r3
}
 800301a:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003020:	2b01      	cmp	r3, #1
 8003022:	d12f      	bne.n	8003084 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800302a:	f3ef 8310 	mrs	r3, PRIMASK
 800302e:	623b      	str	r3, [r7, #32]
  return(result);
 8003030:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003032:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003034:	2301      	movs	r3, #1
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	f383 8810 	msr	PRIMASK, r3
}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2110      	movs	r1, #16
 800304c:	438a      	bics	r2, r1
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003052:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003056:	f383 8810 	msr	PRIMASK, r3
}
 800305a:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	2210      	movs	r2, #16
 8003064:	4013      	ands	r3, r2
 8003066:	2b10      	cmp	r3, #16
 8003068:	d103      	bne.n	8003072 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2210      	movs	r2, #16
 8003070:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	225c      	movs	r2, #92	@ 0x5c
 8003076:	5a9a      	ldrh	r2, [r3, r2]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	0011      	movs	r1, r2
 800307c:	0018      	movs	r0, r3
 800307e:	f7fe fe91 	bl	8001da4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8003082:	e00e      	b.n	80030a2 <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	0018      	movs	r0, r3
 8003088:	f7fd fad6 	bl	8000638 <HAL_UART_RxCpltCallback>
        break;
 800308c:	e009      	b.n	80030a2 <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800308e:	236e      	movs	r3, #110	@ 0x6e
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d004      	beq.n	80030a2 <UART_RxISR_8BIT_FIFOEN+0x276>
 8003098:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800309a:	2220      	movs	r2, #32
 800309c:	4013      	ands	r3, r2
 800309e:	d000      	beq.n	80030a2 <UART_RxISR_8BIT_FIFOEN+0x276>
 80030a0:	e6e7      	b.n	8002e72 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80030a2:	205a      	movs	r0, #90	@ 0x5a
 80030a4:	183b      	adds	r3, r7, r0
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	215e      	movs	r1, #94	@ 0x5e
 80030aa:	5a52      	ldrh	r2, [r2, r1]
 80030ac:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80030ae:	0001      	movs	r1, r0
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d044      	beq.n	8003142 <UART_RxISR_8BIT_FIFOEN+0x316>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2268      	movs	r2, #104	@ 0x68
 80030bc:	5a9b      	ldrh	r3, [r3, r2]
 80030be:	187a      	adds	r2, r7, r1
 80030c0:	8812      	ldrh	r2, [r2, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d23d      	bcs.n	8003142 <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030c6:	f3ef 8310 	mrs	r3, PRIMASK
 80030ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80030cc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80030ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80030d0:	2301      	movs	r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f383 8810 	msr	PRIMASK, r3
}
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	491c      	ldr	r1, [pc, #112]	@ (8003158 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80030e8:	400a      	ands	r2, r1
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f383 8810 	msr	PRIMASK, r3
}
 80030f6:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a18      	ldr	r2, [pc, #96]	@ (800315c <UART_RxISR_8BIT_FIFOEN+0x330>)
 80030fc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003102:	617b      	str	r3, [r7, #20]
  return(result);
 8003104:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003106:	653b      	str	r3, [r7, #80]	@ 0x50
 8003108:	2301      	movs	r3, #1
 800310a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f383 8810 	msr	PRIMASK, r3
}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2120      	movs	r1, #32
 8003120:	430a      	orrs	r2, r1
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003126:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f383 8810 	msr	PRIMASK, r3
}
 800312e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003130:	e007      	b.n	8003142 <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2108      	movs	r1, #8
 800313e:	430a      	orrs	r2, r1
 8003140:	619a      	str	r2, [r3, #24]
}
 8003142:	46c0      	nop			@ (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b020      	add	sp, #128	@ 0x80
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			@ (mov r8, r8)
 800314c:	fffffeff 	.word	0xfffffeff
 8003150:	effffffe 	.word	0xeffffffe
 8003154:	fbffffff 	.word	0xfbffffff
 8003158:	efffffff 	.word	0xefffffff
 800315c:	08002abd 	.word	0x08002abd

08003160 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b0a2      	sub	sp, #136	@ 0x88
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003168:	2382      	movs	r3, #130	@ 0x82
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	2160      	movs	r1, #96	@ 0x60
 8003170:	5a52      	ldrh	r2, [r2, r1]
 8003172:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	2284      	movs	r2, #132	@ 0x84
 800317c:	18ba      	adds	r2, r7, r2
 800317e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	228c      	movs	r2, #140	@ 0x8c
 8003194:	589b      	ldr	r3, [r3, r2]
 8003196:	2b22      	cmp	r3, #34	@ 0x22
 8003198:	d000      	beq.n	800319c <UART_RxISR_16BIT_FIFOEN+0x3c>
 800319a:	e170      	b.n	800347e <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800319c:	2376      	movs	r3, #118	@ 0x76
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	2168      	movs	r1, #104	@ 0x68
 80031a4:	5a52      	ldrh	r2, [r2, r1]
 80031a6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80031a8:	e115      	b.n	80033d6 <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031b0:	2174      	movs	r1, #116	@ 0x74
 80031b2:	187b      	adds	r3, r7, r1
 80031b4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ba:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	2282      	movs	r2, #130	@ 0x82
 80031c0:	18ba      	adds	r2, r7, r2
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	8812      	ldrh	r2, [r2, #0]
 80031c6:	4013      	ands	r3, r2
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d2:	1c9a      	adds	r2, r3, #2
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	225e      	movs	r2, #94	@ 0x5e
 80031dc:	5a9b      	ldrh	r3, [r3, r2]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b299      	uxth	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	225e      	movs	r2, #94	@ 0x5e
 80031e8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	2184      	movs	r1, #132	@ 0x84
 80031f2:	187a      	adds	r2, r7, r1
 80031f4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80031f6:	187b      	adds	r3, r7, r1
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2207      	movs	r2, #7
 80031fc:	4013      	ands	r3, r2
 80031fe:	d04e      	beq.n	800329e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003200:	187b      	adds	r3, r7, r1
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2201      	movs	r2, #1
 8003206:	4013      	ands	r3, r2
 8003208:	d010      	beq.n	800322c <UART_RxISR_16BIT_FIFOEN+0xcc>
 800320a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800320c:	2380      	movs	r3, #128	@ 0x80
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4013      	ands	r3, r2
 8003212:	d00b      	beq.n	800322c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2201      	movs	r2, #1
 800321a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2290      	movs	r2, #144	@ 0x90
 8003220:	589b      	ldr	r3, [r3, r2]
 8003222:	2201      	movs	r2, #1
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2190      	movs	r1, #144	@ 0x90
 800322a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800322c:	2384      	movs	r3, #132	@ 0x84
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2202      	movs	r2, #2
 8003234:	4013      	ands	r3, r2
 8003236:	d00f      	beq.n	8003258 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8003238:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800323a:	2201      	movs	r2, #1
 800323c:	4013      	ands	r3, r2
 800323e:	d00b      	beq.n	8003258 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2202      	movs	r2, #2
 8003246:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2290      	movs	r2, #144	@ 0x90
 800324c:	589b      	ldr	r3, [r3, r2]
 800324e:	2204      	movs	r2, #4
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2190      	movs	r1, #144	@ 0x90
 8003256:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003258:	2384      	movs	r3, #132	@ 0x84
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2204      	movs	r2, #4
 8003260:	4013      	ands	r3, r2
 8003262:	d00f      	beq.n	8003284 <UART_RxISR_16BIT_FIFOEN+0x124>
 8003264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003266:	2201      	movs	r2, #1
 8003268:	4013      	ands	r3, r2
 800326a:	d00b      	beq.n	8003284 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2204      	movs	r2, #4
 8003272:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2290      	movs	r2, #144	@ 0x90
 8003278:	589b      	ldr	r3, [r3, r2]
 800327a:	2202      	movs	r2, #2
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2190      	movs	r1, #144	@ 0x90
 8003282:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2290      	movs	r2, #144	@ 0x90
 8003288:	589b      	ldr	r3, [r3, r2]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	0018      	movs	r0, r3
 8003292:	f7fe fd7f 	bl	8001d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2290      	movs	r2, #144	@ 0x90
 800329a:	2100      	movs	r1, #0
 800329c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	225e      	movs	r2, #94	@ 0x5e
 80032a2:	5a9b      	ldrh	r3, [r3, r2]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d000      	beq.n	80032ac <UART_RxISR_16BIT_FIFOEN+0x14c>
 80032aa:	e094      	b.n	80033d6 <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032ac:	f3ef 8310 	mrs	r3, PRIMASK
 80032b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80032b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032b6:	2301      	movs	r3, #1
 80032b8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032bc:	f383 8810 	msr	PRIMASK, r3
}
 80032c0:	46c0      	nop			@ (mov r8, r8)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4972      	ldr	r1, [pc, #456]	@ (8003498 <UART_RxISR_16BIT_FIFOEN+0x338>)
 80032ce:	400a      	ands	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032d4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d8:	f383 8810 	msr	PRIMASK, r3
}
 80032dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032de:	f3ef 8310 	mrs	r3, PRIMASK
 80032e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80032e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032e8:	2301      	movs	r3, #1
 80032ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032ee:	f383 8810 	msr	PRIMASK, r3
}
 80032f2:	46c0      	nop			@ (mov r8, r8)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4967      	ldr	r1, [pc, #412]	@ (800349c <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8003300:	400a      	ands	r2, r1
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003306:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800330a:	f383 8810 	msr	PRIMASK, r3
}
 800330e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	228c      	movs	r2, #140	@ 0x8c
 8003314:	2120      	movs	r1, #32
 8003316:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	2380      	movs	r3, #128	@ 0x80
 800332c:	041b      	lsls	r3, r3, #16
 800332e:	4013      	ands	r3, r2
 8003330:	d018      	beq.n	8003364 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003332:	f3ef 8310 	mrs	r3, PRIMASK
 8003336:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800333a:	667b      	str	r3, [r7, #100]	@ 0x64
 800333c:	2301      	movs	r3, #1
 800333e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003342:	f383 8810 	msr	PRIMASK, r3
}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4953      	ldr	r1, [pc, #332]	@ (80034a0 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8003354:	400a      	ands	r2, r1
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800335a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800335e:	f383 8810 	msr	PRIMASK, r3
}
 8003362:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003368:	2b01      	cmp	r3, #1
 800336a:	d12f      	bne.n	80033cc <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003372:	f3ef 8310 	mrs	r3, PRIMASK
 8003376:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800337a:	663b      	str	r3, [r7, #96]	@ 0x60
 800337c:	2301      	movs	r3, #1
 800337e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003382:	f383 8810 	msr	PRIMASK, r3
}
 8003386:	46c0      	nop			@ (mov r8, r8)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2110      	movs	r1, #16
 8003394:	438a      	bics	r2, r1
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800339a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339e:	f383 8810 	msr	PRIMASK, r3
}
 80033a2:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	2210      	movs	r2, #16
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d103      	bne.n	80033ba <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2210      	movs	r2, #16
 80033b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	225c      	movs	r2, #92	@ 0x5c
 80033be:	5a9a      	ldrh	r2, [r3, r2]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	0011      	movs	r1, r2
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7fe fced 	bl	8001da4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80033ca:	e010      	b.n	80033ee <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	0018      	movs	r0, r3
 80033d0:	f7fd f932 	bl	8000638 <HAL_UART_RxCpltCallback>
        break;
 80033d4:	e00b      	b.n	80033ee <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80033d6:	2376      	movs	r3, #118	@ 0x76
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d006      	beq.n	80033ee <UART_RxISR_16BIT_FIFOEN+0x28e>
 80033e0:	2384      	movs	r3, #132	@ 0x84
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2220      	movs	r2, #32
 80033e8:	4013      	ands	r3, r2
 80033ea:	d000      	beq.n	80033ee <UART_RxISR_16BIT_FIFOEN+0x28e>
 80033ec:	e6dd      	b.n	80031aa <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80033ee:	205e      	movs	r0, #94	@ 0x5e
 80033f0:	183b      	adds	r3, r7, r0
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	215e      	movs	r1, #94	@ 0x5e
 80033f6:	5a52      	ldrh	r2, [r2, r1]
 80033f8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80033fa:	0001      	movs	r1, r0
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d044      	beq.n	800348e <UART_RxISR_16BIT_FIFOEN+0x32e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2268      	movs	r2, #104	@ 0x68
 8003408:	5a9b      	ldrh	r3, [r3, r2]
 800340a:	187a      	adds	r2, r7, r1
 800340c:	8812      	ldrh	r2, [r2, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d23d      	bcs.n	800348e <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003412:	f3ef 8310 	mrs	r3, PRIMASK
 8003416:	60fb      	str	r3, [r7, #12]
  return(result);
 8003418:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800341a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800341c:	2301      	movs	r3, #1
 800341e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f383 8810 	msr	PRIMASK, r3
}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	491c      	ldr	r1, [pc, #112]	@ (80034a4 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8003434:	400a      	ands	r2, r1
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800343a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f383 8810 	msr	PRIMASK, r3
}
 8003442:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a18      	ldr	r2, [pc, #96]	@ (80034a8 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8003448:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800344a:	f3ef 8310 	mrs	r3, PRIMASK
 800344e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003450:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003452:	657b      	str	r3, [r7, #84]	@ 0x54
 8003454:	2301      	movs	r3, #1
 8003456:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f383 8810 	msr	PRIMASK, r3
}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2120      	movs	r1, #32
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003472:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	f383 8810 	msr	PRIMASK, r3
}
 800347a:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800347c:	e007      	b.n	800348e <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699a      	ldr	r2, [r3, #24]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2108      	movs	r1, #8
 800348a:	430a      	orrs	r2, r1
 800348c:	619a      	str	r2, [r3, #24]
}
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	b022      	add	sp, #136	@ 0x88
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	fffffeff 	.word	0xfffffeff
 800349c:	effffffe 	.word	0xeffffffe
 80034a0:	fbffffff 	.word	0xfbffffff
 80034a4:	efffffff 	.word	0xefffffff
 80034a8:	08002c75 	.word	0x08002c75

080034ac <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e05d      	b.n	8003580 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2288      	movs	r2, #136	@ 0x88
 80034c8:	589b      	ldr	r3, [r3, r2]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d107      	bne.n	80034de <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2284      	movs	r2, #132	@ 0x84
 80034d2:	2100      	movs	r1, #0
 80034d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	0018      	movs	r0, r3
 80034da:	f7fd fb4d 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2288      	movs	r2, #136	@ 0x88
 80034e2:	2124      	movs	r1, #36	@ 0x24
 80034e4:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2101      	movs	r1, #1
 80034f2:	438a      	bics	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	0018      	movs	r0, r3
 8003502:	f7fe fdd9 	bl	80020b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	0018      	movs	r0, r3
 800350a:	f7fe fc57 	bl	8001dbc <UART_SetConfig>
 800350e:	0003      	movs	r3, r0
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e033      	b.n	8003580 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2180      	movs	r1, #128	@ 0x80
 8003524:	01c9      	lsls	r1, r1, #7
 8003526:	430a      	orrs	r2, r1
 8003528:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a15      	ldr	r2, [pc, #84]	@ (8003588 <HAL_RS485Ex_Init+0xdc>)
 8003532:	4013      	ands	r3, r2
 8003534:	0019      	movs	r1, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	430a      	orrs	r2, r1
 800353e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	055b      	lsls	r3, r3, #21
 8003544:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	041b      	lsls	r3, r3, #16
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a0d      	ldr	r2, [pc, #52]	@ (800358c <HAL_RS485Ex_Init+0xe0>)
 8003558:	4013      	ands	r3, r2
 800355a:	0019      	movs	r1, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	430a      	orrs	r2, r1
 8003564:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2101      	movs	r1, #1
 8003572:	430a      	orrs	r2, r1
 8003574:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	0018      	movs	r0, r3
 800357a:	f7fe fe51 	bl	8002220 <UART_CheckIdleState>
 800357e:	0003      	movs	r3, r0
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	b006      	add	sp, #24
 8003586:	bd80      	pop	{r7, pc}
 8003588:	ffff7fff 	.word	0xffff7fff
 800358c:	fc00ffff 	.word	0xfc00ffff

08003590 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2284      	movs	r2, #132	@ 0x84
 800359c:	5c9b      	ldrb	r3, [r3, r2]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e027      	b.n	80035f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2284      	movs	r2, #132	@ 0x84
 80035aa:	2101      	movs	r1, #1
 80035ac:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2288      	movs	r2, #136	@ 0x88
 80035b2:	2124      	movs	r1, #36	@ 0x24
 80035b4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2101      	movs	r1, #1
 80035ca:	438a      	bics	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003600 <HAL_UARTEx_DisableFifoMode+0x70>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2288      	movs	r2, #136	@ 0x88
 80035e8:	2120      	movs	r1, #32
 80035ea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2284      	movs	r2, #132	@ 0x84
 80035f0:	2100      	movs	r1, #0
 80035f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	0018      	movs	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b004      	add	sp, #16
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	46c0      	nop			@ (mov r8, r8)
 8003600:	dfffffff 	.word	0xdfffffff

08003604 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2284      	movs	r2, #132	@ 0x84
 8003612:	5c9b      	ldrb	r3, [r3, r2]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003618:	2302      	movs	r3, #2
 800361a:	e02e      	b.n	800367a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2284      	movs	r2, #132	@ 0x84
 8003620:	2101      	movs	r1, #1
 8003622:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2288      	movs	r2, #136	@ 0x88
 8003628:	2124      	movs	r1, #36	@ 0x24
 800362a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2101      	movs	r1, #1
 8003640:	438a      	bics	r2, r1
 8003642:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	08d9      	lsrs	r1, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	0018      	movs	r0, r3
 800365c:	f000 f8b8 	bl	80037d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2288      	movs	r2, #136	@ 0x88
 800366c:	2120      	movs	r1, #32
 800366e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2284      	movs	r2, #132	@ 0x84
 8003674:	2100      	movs	r1, #0
 8003676:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	0018      	movs	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	b004      	add	sp, #16
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2284      	movs	r2, #132	@ 0x84
 8003692:	5c9b      	ldrb	r3, [r3, r2]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003698:	2302      	movs	r3, #2
 800369a:	e02f      	b.n	80036fc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2284      	movs	r2, #132	@ 0x84
 80036a0:	2101      	movs	r1, #1
 80036a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2288      	movs	r2, #136	@ 0x88
 80036a8:	2124      	movs	r1, #36	@ 0x24
 80036aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2101      	movs	r1, #1
 80036c0:	438a      	bics	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003704 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	0019      	movs	r1, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 f877 	bl	80037d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2288      	movs	r2, #136	@ 0x88
 80036ee:	2120      	movs	r1, #32
 80036f0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2284      	movs	r2, #132	@ 0x84
 80036f6:	2100      	movs	r1, #0
 80036f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b004      	add	sp, #16
 8003702:	bd80      	pop	{r7, pc}
 8003704:	f1ffffff 	.word	0xf1ffffff

08003708 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	@ 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	1dbb      	adds	r3, r7, #6
 8003714:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003716:	2327      	movs	r3, #39	@ 0x27
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	228c      	movs	r2, #140	@ 0x8c
 8003722:	589b      	ldr	r3, [r3, r2]
 8003724:	2b20      	cmp	r3, #32
 8003726:	d14e      	bne.n	80037c6 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
 800372e:	1dbb      	adds	r3, r7, #6
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_UARTEx_ReceiveToIdle_IT+0x32>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e046      	b.n	80037c8 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	2380      	movs	r3, #128	@ 0x80
 8003740:	015b      	lsls	r3, r3, #5
 8003742:	429a      	cmp	r2, r3
 8003744:	d109      	bne.n	800375a <HAL_UARTEx_ReceiveToIdle_IT+0x52>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d105      	bne.n	800375a <HAL_UARTEx_ReceiveToIdle_IT+0x52>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2201      	movs	r2, #1
 8003752:	4013      	ands	r3, r2
 8003754:	d001      	beq.n	800375a <HAL_UARTEx_ReceiveToIdle_IT+0x52>
      {
        return  HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e036      	b.n	80037c8 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8003766:	1dbb      	adds	r3, r7, #6
 8003768:	881a      	ldrh	r2, [r3, #0]
 800376a:	68b9      	ldr	r1, [r7, #8]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	0018      	movs	r0, r3
 8003770:	f7fe fe70 	bl	8002454 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d11c      	bne.n	80037b6 <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2210      	movs	r2, #16
 8003782:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003784:	f3ef 8310 	mrs	r3, PRIMASK
 8003788:	617b      	str	r3, [r7, #20]
  return(result);
 800378a:	697b      	ldr	r3, [r7, #20]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800378c:	623b      	str	r3, [r7, #32]
 800378e:	2301      	movs	r3, #1
 8003790:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f383 8810 	msr	PRIMASK, r3
}
 8003798:	46c0      	nop			@ (mov r8, r8)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2110      	movs	r1, #16
 80037a6:	430a      	orrs	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f383 8810 	msr	PRIMASK, r3
}
 80037b4:	e003      	b.n	80037be <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80037b6:	2327      	movs	r3, #39	@ 0x27
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
    }

    return status;
 80037be:	2327      	movs	r3, #39	@ 0x27
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	e000      	b.n	80037c8 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
  }
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b00a      	add	sp, #40	@ 0x28
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d108      	bne.n	80037f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	226a      	movs	r2, #106	@ 0x6a
 80037e4:	2101      	movs	r1, #1
 80037e6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2268      	movs	r2, #104	@ 0x68
 80037ec:	2101      	movs	r1, #1
 80037ee:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80037f0:	e043      	b.n	800387a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80037f2:	260f      	movs	r6, #15
 80037f4:	19bb      	adds	r3, r7, r6
 80037f6:	2208      	movs	r2, #8
 80037f8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80037fa:	200e      	movs	r0, #14
 80037fc:	183b      	adds	r3, r7, r0
 80037fe:	2208      	movs	r2, #8
 8003800:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	0e5b      	lsrs	r3, r3, #25
 800380a:	b2da      	uxtb	r2, r3
 800380c:	240d      	movs	r4, #13
 800380e:	193b      	adds	r3, r7, r4
 8003810:	2107      	movs	r1, #7
 8003812:	400a      	ands	r2, r1
 8003814:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	0f5b      	lsrs	r3, r3, #29
 800381e:	b2da      	uxtb	r2, r3
 8003820:	250c      	movs	r5, #12
 8003822:	197b      	adds	r3, r7, r5
 8003824:	2107      	movs	r1, #7
 8003826:	400a      	ands	r2, r1
 8003828:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800382a:	183b      	adds	r3, r7, r0
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	197a      	adds	r2, r7, r5
 8003830:	7812      	ldrb	r2, [r2, #0]
 8003832:	4914      	ldr	r1, [pc, #80]	@ (8003884 <UARTEx_SetNbDataToProcess+0xb4>)
 8003834:	5c8a      	ldrb	r2, [r1, r2]
 8003836:	435a      	muls	r2, r3
 8003838:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800383a:	197b      	adds	r3, r7, r5
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	4a12      	ldr	r2, [pc, #72]	@ (8003888 <UARTEx_SetNbDataToProcess+0xb8>)
 8003840:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003842:	0019      	movs	r1, r3
 8003844:	f7fc fcea 	bl	800021c <__divsi3>
 8003848:	0003      	movs	r3, r0
 800384a:	b299      	uxth	r1, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	226a      	movs	r2, #106	@ 0x6a
 8003850:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003852:	19bb      	adds	r3, r7, r6
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	193a      	adds	r2, r7, r4
 8003858:	7812      	ldrb	r2, [r2, #0]
 800385a:	490a      	ldr	r1, [pc, #40]	@ (8003884 <UARTEx_SetNbDataToProcess+0xb4>)
 800385c:	5c8a      	ldrb	r2, [r1, r2]
 800385e:	435a      	muls	r2, r3
 8003860:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003862:	193b      	adds	r3, r7, r4
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	4a08      	ldr	r2, [pc, #32]	@ (8003888 <UARTEx_SetNbDataToProcess+0xb8>)
 8003868:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800386a:	0019      	movs	r1, r3
 800386c:	f7fc fcd6 	bl	800021c <__divsi3>
 8003870:	0003      	movs	r3, r0
 8003872:	b299      	uxth	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2268      	movs	r2, #104	@ 0x68
 8003878:	5299      	strh	r1, [r3, r2]
}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	b005      	add	sp, #20
 8003880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	08003b74 	.word	0x08003b74
 8003888:	08003b7c 	.word	0x08003b7c

0800388c <memset>:
 800388c:	0003      	movs	r3, r0
 800388e:	1882      	adds	r2, r0, r2
 8003890:	4293      	cmp	r3, r2
 8003892:	d100      	bne.n	8003896 <memset+0xa>
 8003894:	4770      	bx	lr
 8003896:	7019      	strb	r1, [r3, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	e7f9      	b.n	8003890 <memset+0x4>

0800389c <__libc_init_array>:
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	2600      	movs	r6, #0
 80038a0:	4c0c      	ldr	r4, [pc, #48]	@ (80038d4 <__libc_init_array+0x38>)
 80038a2:	4d0d      	ldr	r5, [pc, #52]	@ (80038d8 <__libc_init_array+0x3c>)
 80038a4:	1b64      	subs	r4, r4, r5
 80038a6:	10a4      	asrs	r4, r4, #2
 80038a8:	42a6      	cmp	r6, r4
 80038aa:	d109      	bne.n	80038c0 <__libc_init_array+0x24>
 80038ac:	2600      	movs	r6, #0
 80038ae:	f000 f819 	bl	80038e4 <_init>
 80038b2:	4c0a      	ldr	r4, [pc, #40]	@ (80038dc <__libc_init_array+0x40>)
 80038b4:	4d0a      	ldr	r5, [pc, #40]	@ (80038e0 <__libc_init_array+0x44>)
 80038b6:	1b64      	subs	r4, r4, r5
 80038b8:	10a4      	asrs	r4, r4, #2
 80038ba:	42a6      	cmp	r6, r4
 80038bc:	d105      	bne.n	80038ca <__libc_init_array+0x2e>
 80038be:	bd70      	pop	{r4, r5, r6, pc}
 80038c0:	00b3      	lsls	r3, r6, #2
 80038c2:	58eb      	ldr	r3, [r5, r3]
 80038c4:	4798      	blx	r3
 80038c6:	3601      	adds	r6, #1
 80038c8:	e7ee      	b.n	80038a8 <__libc_init_array+0xc>
 80038ca:	00b3      	lsls	r3, r6, #2
 80038cc:	58eb      	ldr	r3, [r5, r3]
 80038ce:	4798      	blx	r3
 80038d0:	3601      	adds	r6, #1
 80038d2:	e7f2      	b.n	80038ba <__libc_init_array+0x1e>
 80038d4:	08003b84 	.word	0x08003b84
 80038d8:	08003b84 	.word	0x08003b84
 80038dc:	08003b88 	.word	0x08003b88
 80038e0:	08003b84 	.word	0x08003b84

080038e4 <_init>:
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e6:	46c0      	nop			@ (mov r8, r8)
 80038e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ea:	bc08      	pop	{r3}
 80038ec:	469e      	mov	lr, r3
 80038ee:	4770      	bx	lr

080038f0 <_fini>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f6:	bc08      	pop	{r3}
 80038f8:	469e      	mov	lr, r3
 80038fa:	4770      	bx	lr
